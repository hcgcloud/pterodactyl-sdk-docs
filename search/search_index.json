{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pterodactyl PHP SDK \u00b6 Pterodactyl Panel PHP SDK/API wrapper (For Pterodactyl 0.7.x), a forked version from @FruitBytes . Quick start \u00b6 To install the SDK in your project you need to require the package via composer : composer require hcgcloud/pterodactyl-sdk Then use Composer's autoload unless you are using a framework that support composer autoload: require __DIR__.'/../vendor/autoload.php'; And finally create an instance of the SDK: $pterodactyl = new \\HCGCloud\\Pterodactyl\\Pterodactyl(API_KEY_HERE, BASE_URI_HERE); Then you can call the apis. Usage \u00b6 Please check this documentation for more details. Support \u00b6 You can get support by going to our Discord server or submitting new issue . As a third-party API wrapper, We recommend you not asking for help elsewhere, or we may not be able to help you. License \u00b6 hcgcloud/pterodactyl-sdk is licensed under the MIT License (MIT). Please see the license file for more information.","title":"Welcome"},{"location":"#pterodactyl-php-sdk","text":"Pterodactyl Panel PHP SDK/API wrapper (For Pterodactyl 0.7.x), a forked version from @FruitBytes .","title":"Pterodactyl PHP SDK"},{"location":"#quick-start","text":"To install the SDK in your project you need to require the package via composer : composer require hcgcloud/pterodactyl-sdk Then use Composer's autoload unless you are using a framework that support composer autoload: require __DIR__.'/../vendor/autoload.php'; And finally create an instance of the SDK: $pterodactyl = new \\HCGCloud\\Pterodactyl\\Pterodactyl(API_KEY_HERE, BASE_URI_HERE); Then you can call the apis.","title":"Quick start"},{"location":"#usage","text":"Please check this documentation for more details.","title":"Usage"},{"location":"#support","text":"You can get support by going to our Discord server or submitting new issue . As a third-party API wrapper, We recommend you not asking for help elsewhere, or we may not be able to help you.","title":"Support"},{"location":"#license","text":"hcgcloud/pterodactyl-sdk is licensed under the MIT License (MIT). Please see the license file for more information.","title":"License"},{"location":"exceptions/","text":"Exceptions \u00b6 FailedActionException \u00b6 This exception is thrown when the server returns 400 . Solution: Check the response body. NotFoundException \u00b6 This exception is thrown when the server returns 404 . Solution: Check if the resource exists. TimeoutException \u00b6 This exception is thrown when the request is timeout. Solution: Check the connection between your server and panel. ValidationException \u00b6 This exception is thrown when the server returns 422 , the given data failed to pass validation. Solution \u00b6 You can use code like the following to catch exceptions: <?php try { $servers = $pterodactyl -> createServer ([ //... ]); } catch ( \\HCGCloud\\Pterodactyl\\Exceptions\\ValidationException $e ){ print_r ( $e -> errors ()); } ?> By calling $e->errors() of a ValidationException will return you which parameter failed to pass the validation.","title":"Exceptions"},{"location":"exceptions/#exceptions","text":"","title":"Exceptions"},{"location":"exceptions/#failedactionexception","text":"This exception is thrown when the server returns 400 . Solution: Check the response body.","title":"FailedActionException"},{"location":"exceptions/#notfoundexception","text":"This exception is thrown when the server returns 404 . Solution: Check if the resource exists.","title":"NotFoundException"},{"location":"exceptions/#timeoutexception","text":"This exception is thrown when the request is timeout. Solution: Check the connection between your server and panel.","title":"TimeoutException"},{"location":"exceptions/#validationexception","text":"This exception is thrown when the server returns 422 , the given data failed to pass validation.","title":"ValidationException"},{"location":"exceptions/#solution","text":"You can use code like the following to catch exceptions: <?php try { $servers = $pterodactyl -> createServer ([ //... ]); } catch ( \\HCGCloud\\Pterodactyl\\Exceptions\\ValidationException $e ){ print_r ( $e -> errors ()); } ?> By calling $e->errors() of a ValidationException will return you which parameter failed to pass the validation.","title":"Solution"},{"location":"getting-started/","text":"Getting started \u00b6 Installation \u00b6 To install the SDK in your project you need to require the package via composer : composer require hcgcloud/pterodactyl-sdk Then use Composer's autoload unless you are using a framework that support composer autoload: require __DIR__.'/../vendor/autoload.php'; And finally create an instance of the SDK, the API_KEY can be Account API or Application API , you can learn the difference below : $pterodactyl = new \\HCGCloud\\Pterodactyl\\Pterodactyl(API_KEY_HERE, BASE_URI_HERE); or you can also use create an instance in this style: use HCGCloud\\Pterodactyl\\Pterodactyl; $pterodactyl = new Pterodactyl(API_KEY_HERE, BASE_URI_HERE); Usage \u00b6 Type of API \u00b6 Before using other apis, you should know the difference between Account API and Application API . Account API \u00b6 Note You can find functions available for Account API in the client tab of the navigation. Account API is for a single user of your panel, it can perform like Send console command and Send power action while Application API can't. You can generate a key for an administrator account, then you can have the rights to control all servers. Can be generated from: https://yourpanel.url/account/api Application API \u00b6 Application API is for your panel itself, it can perform like Create Server and Create Node while Account API can't. Can be generated from: https://yourpanel.url/admin/api Example \u00b6 Using the pterodactyl instance you may perform multiple actions as well as retrieve the different resources Pterodactyl's API provides, here are some examples using Application API : $servers = $pterodactyl->servers(); This will give you an array of servers that you have access to, each server is represented by an instance of HCGCloud\\Pterodactyl\\Resources\\Server , this instance has multiple public properties like $name , $id , $owner , $memory , and others. You may also retrieve a single server using: $server = $pterodactyl->server(SERVER_ID_HERE); For other functions, you can find them from the navigation.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#installation","text":"To install the SDK in your project you need to require the package via composer : composer require hcgcloud/pterodactyl-sdk Then use Composer's autoload unless you are using a framework that support composer autoload: require __DIR__.'/../vendor/autoload.php'; And finally create an instance of the SDK, the API_KEY can be Account API or Application API , you can learn the difference below : $pterodactyl = new \\HCGCloud\\Pterodactyl\\Pterodactyl(API_KEY_HERE, BASE_URI_HERE); or you can also use create an instance in this style: use HCGCloud\\Pterodactyl\\Pterodactyl; $pterodactyl = new Pterodactyl(API_KEY_HERE, BASE_URI_HERE);","title":"Installation"},{"location":"getting-started/#usage","text":"","title":"Usage"},{"location":"getting-started/#type-of-api","text":"Before using other apis, you should know the difference between Account API and Application API .","title":"Type of API"},{"location":"getting-started/#account-api","text":"Note You can find functions available for Account API in the client tab of the navigation. Account API is for a single user of your panel, it can perform like Send console command and Send power action while Application API can't. You can generate a key for an administrator account, then you can have the rights to control all servers. Can be generated from: https://yourpanel.url/account/api","title":"Account API"},{"location":"getting-started/#application-api","text":"Application API is for your panel itself, it can perform like Create Server and Create Node while Account API can't. Can be generated from: https://yourpanel.url/admin/api","title":"Application API"},{"location":"getting-started/#example","text":"Using the pterodactyl instance you may perform multiple actions as well as retrieve the different resources Pterodactyl's API provides, here are some examples using Application API : $servers = $pterodactyl->servers(); This will give you an array of servers that you have access to, each server is represented by an instance of HCGCloud\\Pterodactyl\\Resources\\Server , this instance has multiple public properties like $name , $id , $owner , $memory , and others. You may also retrieve a single server using: $server = $pterodactyl->server(SERVER_ID_HERE); For other functions, you can find them from the navigation.","title":"Example"},{"location":"includes/","text":"Includes \u00b6 You may notice that some functions like server() , user() have a parameter called $includes , this can be used to query related data. For example, to query all servers belongs to a user, you can use the following code: <?php $servers = $pterodactyl -> user ( 1 , [ 'servers' ]); print_r ( $servers ); Here's a list of available includes, but it may not be a complete one. Includes \u00b6 Egg \u00b6 servers variables Location \u00b6 nodes servers Node \u00b6 servers Server \u00b6 allocations databases subusers User \u00b6 servers","title":"Includes"},{"location":"includes/#includes","text":"You may notice that some functions like server() , user() have a parameter called $includes , this can be used to query related data. For example, to query all servers belongs to a user, you can use the following code: <?php $servers = $pterodactyl -> user ( 1 , [ 'servers' ]); print_r ( $servers ); Here's a list of available includes, but it may not be a complete one.","title":"Includes"},{"location":"includes/#includes_1","text":"","title":"Includes"},{"location":"includes/#egg","text":"servers variables","title":"Egg"},{"location":"includes/#location","text":"nodes servers","title":"Location"},{"location":"includes/#node","text":"servers","title":"Node"},{"location":"includes/#server","text":"allocations databases subusers","title":"Server"},{"location":"includes/#user","text":"servers","title":"User"},{"location":"references/","text":"References \u00b6 When developing with this SDK, you can also refer to the following contents: Pterodactyl API Reference by Dashflo.net Pterodactyl Panel Source by Pterodactyl official","title":"References"},{"location":"references/#references","text":"When developing with this SDK, you can also refer to the following contents: Pterodactyl API Reference by Dashflo.net Pterodactyl Panel Source by Pterodactyl official","title":"References"},{"location":"resources/","text":"Resources \u00b6 When you use apis like server() , node() , it will return a resource instance. Then you can call the functions of the instance, like $server->update() , $node->delete() , etc. Note Be noticed that when you use functions like update() , the changes won't applied to the instance itself, so you should manually call the get api again to get the latest data. Here's a list of available resource types. Type \u00b6 Allocation \u00b6 The allocation resource. Egg \u00b6 The egg resource. Location \u00b6 The location resource. Functions \u00b6 <?php $location -> delete (); $location -> update ( array $data ); ?> Nest \u00b6 The nest resource. Functions \u00b6 <?php $nest -> eggs (); $nest -> egg ( $eggId , $includes = []); ?> Node \u00b6 The node resource. Functions \u00b6 <?php $node -> delete (); $node -> update ( array $data ); $node -> allocations ( int $page = 1 ); $node -> createAllocation ( array $data ); $node -> deleteAllocation ( $allocationId ); ?> Server \u00b6 The server resource. Functions \u00b6 <?php //Available with Application API $server -> delete (); $server -> forceDelete (); $server -> suspend (); $server -> unsuspend (); $server -> updateDetails ( array $data ); $server -> updateBuild ( array $data ); $server -> updateStartup ( array $data ); $server -> reinstall (); $server -> rebuild (); $server -> databases (); $server -> database ( $databaseId ); $server -> resetDatabasePassword ( $databaseId ); $server -> deleteDatabase ( $databaseId ); //Available with Account API $server -> power ( $action ); $server -> command ( $command ); ?> ServerDatabase \u00b6 The server database resource. Functions \u00b6 <?php $serverdatabase -> resetPassword (); $serverdatabase -> delete (); ?> Stats \u00b6 The stats resource. User \u00b6 The user resource. Functions \u00b6 <?php $user -> delete (); $user -> update ( array $data ); ?>","title":"Resources"},{"location":"resources/#resources","text":"When you use apis like server() , node() , it will return a resource instance. Then you can call the functions of the instance, like $server->update() , $node->delete() , etc. Note Be noticed that when you use functions like update() , the changes won't applied to the instance itself, so you should manually call the get api again to get the latest data. Here's a list of available resource types.","title":"Resources"},{"location":"resources/#type","text":"","title":"Type"},{"location":"resources/#allocation","text":"The allocation resource.","title":"Allocation"},{"location":"resources/#egg","text":"The egg resource.","title":"Egg"},{"location":"resources/#location","text":"The location resource.","title":"Location"},{"location":"resources/#functions","text":"<?php $location -> delete (); $location -> update ( array $data ); ?>","title":"Functions"},{"location":"resources/#nest","text":"The nest resource.","title":"Nest"},{"location":"resources/#functions_1","text":"<?php $nest -> eggs (); $nest -> egg ( $eggId , $includes = []); ?>","title":"Functions"},{"location":"resources/#node","text":"The node resource.","title":"Node"},{"location":"resources/#functions_2","text":"<?php $node -> delete (); $node -> update ( array $data ); $node -> allocations ( int $page = 1 ); $node -> createAllocation ( array $data ); $node -> deleteAllocation ( $allocationId ); ?>","title":"Functions"},{"location":"resources/#server","text":"The server resource.","title":"Server"},{"location":"resources/#functions_3","text":"<?php //Available with Application API $server -> delete (); $server -> forceDelete (); $server -> suspend (); $server -> unsuspend (); $server -> updateDetails ( array $data ); $server -> updateBuild ( array $data ); $server -> updateStartup ( array $data ); $server -> reinstall (); $server -> rebuild (); $server -> databases (); $server -> database ( $databaseId ); $server -> resetDatabasePassword ( $databaseId ); $server -> deleteDatabase ( $databaseId ); //Available with Account API $server -> power ( $action ); $server -> command ( $command ); ?>","title":"Functions"},{"location":"resources/#serverdatabase","text":"The server database resource.","title":"ServerDatabase"},{"location":"resources/#functions_4","text":"<?php $serverdatabase -> resetPassword (); $serverdatabase -> delete (); ?>","title":"Functions"},{"location":"resources/#stats","text":"The stats resource.","title":"Stats"},{"location":"resources/#user","text":"The user resource.","title":"User"},{"location":"resources/#functions_5","text":"<?php $user -> delete (); $user -> update ( array $data ); ?>","title":"Functions"},{"location":"application/allocation/allocations/","text":"List Allocations with Application API \u00b6 Get the collection of allocations of a node. Usage \u00b6 <?php $pterodactyl -> allocations ( $nodeId , int $page = 1 ); //For a node instance $node -> allocations ( int $page = 1 ); ?> Parameters \u00b6 Parameter Description Rules nodeId The id of the node page The page number Returns \u00b6 { \"data\" : [{ \"id\" : 117 , \"ip\" : \"123.123.123.123\" , \"alias\" : \"location-1.pterodactyl.panel\" , \"port\" : 4202 , \"assigned\" : false , \"object\" : \"allocation\" }, { \"id\" : 103 , \"ip\" : \"123.123.123.123\" , \"alias\" : \"location-1.pterodactyl.panel\" , \"port\" : 5555 , \"assigned\" : false , \"object\" : \"allocation\" }, { \"id\" : 3 , \"ip\" : \"123.123.123.123\" , \"alias\" : \"location-1.pterodactyl.panel\" , \"port\" : 8888 , \"assigned\" : false , \"object\" : \"allocation\" }], \"meta\" : { \"pagination\" : { \"total\" : 3 , \"count\" : 3 , \"per_page\" : 50 , \"current_page\" : 1 , \"total_pages\" : 1 , \"links\" : [] } } } Example \u00b6 <?php $allocations = $pterodactyl -> allocations ( 1 ); print_r ( $allocations ); ?> <?php $node = $pterodactyl -> node ( 1 ); $allocations = $node -> allocations (); print_r ( $allocations ); ?>","title":"List allocations"},{"location":"application/allocation/allocations/#list-allocations-with-application-api","text":"Get the collection of allocations of a node.","title":"List Allocations with Application API"},{"location":"application/allocation/allocations/#usage","text":"<?php $pterodactyl -> allocations ( $nodeId , int $page = 1 ); //For a node instance $node -> allocations ( int $page = 1 ); ?>","title":"Usage"},{"location":"application/allocation/allocations/#parameters","text":"Parameter Description Rules nodeId The id of the node page The page number","title":"Parameters"},{"location":"application/allocation/allocations/#returns","text":"{ \"data\" : [{ \"id\" : 117 , \"ip\" : \"123.123.123.123\" , \"alias\" : \"location-1.pterodactyl.panel\" , \"port\" : 4202 , \"assigned\" : false , \"object\" : \"allocation\" }, { \"id\" : 103 , \"ip\" : \"123.123.123.123\" , \"alias\" : \"location-1.pterodactyl.panel\" , \"port\" : 5555 , \"assigned\" : false , \"object\" : \"allocation\" }, { \"id\" : 3 , \"ip\" : \"123.123.123.123\" , \"alias\" : \"location-1.pterodactyl.panel\" , \"port\" : 8888 , \"assigned\" : false , \"object\" : \"allocation\" }], \"meta\" : { \"pagination\" : { \"total\" : 3 , \"count\" : 3 , \"per_page\" : 50 , \"current_page\" : 1 , \"total_pages\" : 1 , \"links\" : [] } } }","title":"Returns"},{"location":"application/allocation/allocations/#example","text":"<?php $allocations = $pterodactyl -> allocations ( 1 ); print_r ( $allocations ); ?> <?php $node = $pterodactyl -> node ( 1 ); $allocations = $node -> allocations (); print_r ( $allocations ); ?>","title":"Example"},{"location":"application/allocation/create-allocation/","text":"Create Allocation with Application API \u00b6 Create new allocation(s). Usage \u00b6 <?php $pterodactyl -> createAllocation ( $nodeId , array $data ); //For a node instance $node -> createAllocation ( array $data ); ?> Parameters \u00b6 Parameter Description Rules nodeId The id of the node data The data to create location data \u00b6 Parameter Description Rules ip IP address required|string alias Alias name sometimes|nullable|string|max:255 ports Ports required|array ports.* Port string Returns \u00b6 None Throwing exception if failed. Example \u00b6 <?php $pterodactyl -> createAllocation ( 1 , [ 'ip' => '123.123.123.123' , 'alias' => 'location-1.pterodactyl.panel' , 'ports' => [ '51000' , '51001' , '51002' ] ]); ?> <?php $node = $pterodactyl -> node ( 1 ); $node -> createAllocation ([ 'ip' => '123.123.123.123' , 'alias' => 'location-1.pterodactyl.panel' , 'ports' => [ '51000' , '51001' , '51002' ] ]); ?>","title":"Create allocation"},{"location":"application/allocation/create-allocation/#create-allocation-with-application-api","text":"Create new allocation(s).","title":"Create Allocation with Application API"},{"location":"application/allocation/create-allocation/#usage","text":"<?php $pterodactyl -> createAllocation ( $nodeId , array $data ); //For a node instance $node -> createAllocation ( array $data ); ?>","title":"Usage"},{"location":"application/allocation/create-allocation/#parameters","text":"Parameter Description Rules nodeId The id of the node data The data to create location","title":"Parameters"},{"location":"application/allocation/create-allocation/#data","text":"Parameter Description Rules ip IP address required|string alias Alias name sometimes|nullable|string|max:255 ports Ports required|array ports.* Port string","title":"data"},{"location":"application/allocation/create-allocation/#returns","text":"None Throwing exception if failed.","title":"Returns"},{"location":"application/allocation/create-allocation/#example","text":"<?php $pterodactyl -> createAllocation ( 1 , [ 'ip' => '123.123.123.123' , 'alias' => 'location-1.pterodactyl.panel' , 'ports' => [ '51000' , '51001' , '51002' ] ]); ?> <?php $node = $pterodactyl -> node ( 1 ); $node -> createAllocation ([ 'ip' => '123.123.123.123' , 'alias' => 'location-1.pterodactyl.panel' , 'ports' => [ '51000' , '51001' , '51002' ] ]); ?>","title":"Example"},{"location":"application/allocation/delete-allocation/","text":"Delete Allocation with Application API \u00b6 Delete the given allocation. Usage \u00b6 <?php $pterodactyl -> deleteAllocation ( $nodeId , $allocationId ); //For a node instance $node -> deleteAllocation ( $allocationId ); ?> Parameters \u00b6 Parameter Description Rules nodeId The id of the node allocationId The id of the allocation Returns \u00b6 None Throwing exception if failed. Example \u00b6 <?php try { $pterodactyl -> deleteAllocation ( 1 , 3 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $node = $pterodactyl -> node ( 1 ); $node -> deleteAllocation ( 3 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Delete allocation"},{"location":"application/allocation/delete-allocation/#delete-allocation-with-application-api","text":"Delete the given allocation.","title":"Delete Allocation with Application API"},{"location":"application/allocation/delete-allocation/#usage","text":"<?php $pterodactyl -> deleteAllocation ( $nodeId , $allocationId ); //For a node instance $node -> deleteAllocation ( $allocationId ); ?>","title":"Usage"},{"location":"application/allocation/delete-allocation/#parameters","text":"Parameter Description Rules nodeId The id of the node allocationId The id of the allocation","title":"Parameters"},{"location":"application/allocation/delete-allocation/#returns","text":"None Throwing exception if failed.","title":"Returns"},{"location":"application/allocation/delete-allocation/#example","text":"<?php try { $pterodactyl -> deleteAllocation ( 1 , 3 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $node = $pterodactyl -> node ( 1 ); $node -> deleteAllocation ( 3 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Example"},{"location":"application/egg/egg/","text":"Get egg with Application API \u00b6 Get an egg instance. Usage \u00b6 <?php $pterodactyl -> egg ( $nestId , $eggId , $includes = []); //For a nest instance $nest -> egg ( $eggId , $includes = []); ?> Parameters \u00b6 Parameter Description Rules nestId The id of the nest eggId The id of the egg includes The related data you want to query Returns \u00b6 Returns an egg instance . { \"id\" : 14 , \"uuid\" : \"c8422123-65e1-4e21-8097-a7b7356714b7\" , \"nest\" : 4 , \"author\" : \"support@pterodactyl.io\" , \"description\" : \"The only aim in Rust is to survive. To do this you will need to overcome struggles such as hunger, thirst and cold. Build a fire. Build a shelter. Kill animals for meat. Protect yourself from other players, and kill them for meat. Create alliances with other players and form a town. Do whatever it takes to survive.\" , \"docker_image\" : null , \"config\" : { \"files\" : [], \"startup\" : { \"done\" : \"Server startup complete\" , \"userInteraction\" : [] }, \"stop\" : \"quit\" , \"logs\" : { \"custom\" : false , \"location\" : \"latest.log\" }, \"extends\" : null }, \"startup\" : \".\\/RustDedicated -batchmode +server.port {{SERVER_PORT}} +server.identity \\\"rust\\\" +rcon.port {{RCON_PORT}} +rcon.web true +server.hostname \\\\\\\"{{HOSTNAME}}\\\\\\\" +server.level \\\\\\\"{{LEVEL}}\\\\\\\" +server.description \\\\\\\"{{DESCRIPTION}}\\\\\\\" +server.url \\\\\\\"{{SERVER_URL}}\\\\\\\" +server.headerimage \\\\\\\"{{SERVER_IMG}}\\\\\\\" +server.worldsize \\\\\\\"{{WORLD_SIZE}}\\\\\\\" +server.seed \\\\\\\"{{WORLD_SEED}}\\\\\\\" +server.maxplayers {{MAX_PLAYERS}} +rcon.password \\\\\\\"{{RCON_PASS}}\\\\\\\" +server.saveinterval {{SAVEINTERVAL}} {{ADDITIONAL_ARGS}}\" , \"script\" : { \"privileged\" : true , \"install\" : \"apt update\\r\\napt -y --no-install-recommends install curl unzip lib32gcc1 ca-certificates\\r\\ncd \\/tmp\\r\\ncurl -sSL -o steamcmd.tar.gz http:\\/\\/media.steampowered.com\\/installer\\/steamcmd_linux.tar.gz\\r\\n\\r\\nmkdir -p \\/mnt\\/server\\/steam\\r\\ntar -xzvf steamcmd.tar.gz -C \\/mnt\\/server\\/steam\\r\\ncd \\/mnt\\/server\\/steam\\r\\nchown -R root:root \\/mnt\\r\\n\\r\\nexport HOME=\\/mnt\\/server\\r\\n.\\/steamcmd.sh +login anonymous +force_install_dir \\/mnt\\/server +app_update 258550 +quit\\r\\nmkdir -p \\/mnt\\/server\\/.steam\\/sdk32\\r\\ncp -v \\/mnt\\/server\\/steam\\/linux32\\/steamclient.so \\/mnt\\/server\\/.steam\\/sdk32\\/steamclient.so\" , \"entry\" : \"bash\" , \"container\" : \"ubuntu:16.04\" , \"extends\" : null }, \"createdAt\" : \"2019-01-05T12:56:46+00:00\" , \"updatedAt\" : \"2019-02-16T02:33:50+00:00\" , \"object\" : \"egg\" , \"dockerImage\" : \"quay.io\\/pterodactyl\\/core:rust\" } Example \u00b6 <?php $egg = $pterodactyl -> egg ( 4 , 14 ); print_r ( $egg ); ?> <?php $nest = $pterodactyl -> nest ( 4 ); $egg = $nest -> egg ( 14 ); print_r ( $egg ); ?>","title":"Get egg"},{"location":"application/egg/egg/#get-egg-with-application-api","text":"Get an egg instance.","title":"Get egg with Application API"},{"location":"application/egg/egg/#usage","text":"<?php $pterodactyl -> egg ( $nestId , $eggId , $includes = []); //For a nest instance $nest -> egg ( $eggId , $includes = []); ?>","title":"Usage"},{"location":"application/egg/egg/#parameters","text":"Parameter Description Rules nestId The id of the nest eggId The id of the egg includes The related data you want to query","title":"Parameters"},{"location":"application/egg/egg/#returns","text":"Returns an egg instance . { \"id\" : 14 , \"uuid\" : \"c8422123-65e1-4e21-8097-a7b7356714b7\" , \"nest\" : 4 , \"author\" : \"support@pterodactyl.io\" , \"description\" : \"The only aim in Rust is to survive. To do this you will need to overcome struggles such as hunger, thirst and cold. Build a fire. Build a shelter. Kill animals for meat. Protect yourself from other players, and kill them for meat. Create alliances with other players and form a town. Do whatever it takes to survive.\" , \"docker_image\" : null , \"config\" : { \"files\" : [], \"startup\" : { \"done\" : \"Server startup complete\" , \"userInteraction\" : [] }, \"stop\" : \"quit\" , \"logs\" : { \"custom\" : false , \"location\" : \"latest.log\" }, \"extends\" : null }, \"startup\" : \".\\/RustDedicated -batchmode +server.port {{SERVER_PORT}} +server.identity \\\"rust\\\" +rcon.port {{RCON_PORT}} +rcon.web true +server.hostname \\\\\\\"{{HOSTNAME}}\\\\\\\" +server.level \\\\\\\"{{LEVEL}}\\\\\\\" +server.description \\\\\\\"{{DESCRIPTION}}\\\\\\\" +server.url \\\\\\\"{{SERVER_URL}}\\\\\\\" +server.headerimage \\\\\\\"{{SERVER_IMG}}\\\\\\\" +server.worldsize \\\\\\\"{{WORLD_SIZE}}\\\\\\\" +server.seed \\\\\\\"{{WORLD_SEED}}\\\\\\\" +server.maxplayers {{MAX_PLAYERS}} +rcon.password \\\\\\\"{{RCON_PASS}}\\\\\\\" +server.saveinterval {{SAVEINTERVAL}} {{ADDITIONAL_ARGS}}\" , \"script\" : { \"privileged\" : true , \"install\" : \"apt update\\r\\napt -y --no-install-recommends install curl unzip lib32gcc1 ca-certificates\\r\\ncd \\/tmp\\r\\ncurl -sSL -o steamcmd.tar.gz http:\\/\\/media.steampowered.com\\/installer\\/steamcmd_linux.tar.gz\\r\\n\\r\\nmkdir -p \\/mnt\\/server\\/steam\\r\\ntar -xzvf steamcmd.tar.gz -C \\/mnt\\/server\\/steam\\r\\ncd \\/mnt\\/server\\/steam\\r\\nchown -R root:root \\/mnt\\r\\n\\r\\nexport HOME=\\/mnt\\/server\\r\\n.\\/steamcmd.sh +login anonymous +force_install_dir \\/mnt\\/server +app_update 258550 +quit\\r\\nmkdir -p \\/mnt\\/server\\/.steam\\/sdk32\\r\\ncp -v \\/mnt\\/server\\/steam\\/linux32\\/steamclient.so \\/mnt\\/server\\/.steam\\/sdk32\\/steamclient.so\" , \"entry\" : \"bash\" , \"container\" : \"ubuntu:16.04\" , \"extends\" : null }, \"createdAt\" : \"2019-01-05T12:56:46+00:00\" , \"updatedAt\" : \"2019-02-16T02:33:50+00:00\" , \"object\" : \"egg\" , \"dockerImage\" : \"quay.io\\/pterodactyl\\/core:rust\" }","title":"Returns"},{"location":"application/egg/egg/#example","text":"<?php $egg = $pterodactyl -> egg ( 4 , 14 ); print_r ( $egg ); ?> <?php $nest = $pterodactyl -> nest ( 4 ); $egg = $nest -> egg ( 14 ); print_r ( $egg ); ?>","title":"Example"},{"location":"application/egg/eggs/","text":"List Eggs with Application API \u00b6 Get the collection of eggs of a nest. Usage \u00b6 <?php $pterodactyl -> eggs ( $nestId ); //For a nest instance $nest -> eggs (); ?> Parameters \u00b6 Parameter Description Rules nestId The id of the nest Returns \u00b6 [{ \"id\" : 14 , \"uuid\" : \"c8422123-65e1-4e21-8097-a7b7356714b7\" , \"nest\" : 4 , \"author\" : \"support@pterodactyl.io\" , \"description\" : \"The only aim in Rust is to survive. To do this you will need to overcome struggles such as hunger, thirst and cold. Build a fire. Build a shelter. Kill animals for meat. Protect yourself from other players, and kill them for meat. Create alliances with other players and form a town. Do whatever it takes to survive.\" , \"docker_image\" : null , \"config\" : { \"files\" : [], \"startup\" : { \"done\" : \"Server startup complete\" , \"userInteraction\" : [] }, \"stop\" : \"quit\" , \"logs\" : { \"custom\" : false , \"location\" : \"latest.log\" }, \"extends\" : null }, \"startup\" : \".\\/RustDedicated -batchmode +server.port {{SERVER_PORT}} +server.identity \\\"rust\\\" +rcon.port {{RCON_PORT}} +rcon.web true +server.hostname \\\\\\\"{{HOSTNAME}}\\\\\\\" +server.level \\\\\\\"{{LEVEL}}\\\\\\\" +server.description \\\\\\\"{{DESCRIPTION}}\\\\\\\" +server.url \\\\\\\"{{SERVER_URL}}\\\\\\\" +server.headerimage \\\\\\\"{{SERVER_IMG}}\\\\\\\" +server.worldsize \\\\\\\"{{WORLD_SIZE}}\\\\\\\" +server.seed \\\\\\\"{{WORLD_SEED}}\\\\\\\" +server.maxplayers {{MAX_PLAYERS}} +rcon.password \\\\\\\"{{RCON_PASS}}\\\\\\\" +server.saveinterval {{SAVEINTERVAL}} {{ADDITIONAL_ARGS}}\" , \"script\" : { \"privileged\" : true , \"install\" : \"apt update\\r\\napt -y --no-install-recommends install curl unzip lib32gcc1 ca-certificates\\r\\ncd \\/tmp\\r\\ncurl -sSL -o steamcmd.tar.gz http:\\/\\/media.steampowered.com\\/installer\\/steamcmd_linux.tar.gz\\r\\n\\r\\nmkdir -p \\/mnt\\/server\\/steam\\r\\ntar -xzvf steamcmd.tar.gz -C \\/mnt\\/server\\/steam\\r\\ncd \\/mnt\\/server\\/steam\\r\\nchown -R root:root \\/mnt\\r\\n\\r\\nexport HOME=\\/mnt\\/server\\r\\n.\\/steamcmd.sh +login anonymous +force_install_dir \\/mnt\\/server +app_update 258550 +quit\\r\\nmkdir -p \\/mnt\\/server\\/.steam\\/sdk32\\r\\ncp -v \\/mnt\\/server\\/steam\\/linux32\\/steamclient.so \\/mnt\\/server\\/.steam\\/sdk32\\/steamclient.so\" , \"entry\" : \"bash\" , \"container\" : \"ubuntu:16.04\" , \"extends\" : null }, \"createdAt\" : \"2019-01-05T12:56:46+00:00\" , \"updatedAt\" : \"2019-02-16T02:33:50+00:00\" , \"object\" : \"egg\" , \"dockerImage\" : \"quay.io\\/pterodactyl\\/core:rust\" }] Example \u00b6 <?php $eggs = $pterodactyl -> eggs ( 4 ); print_r ( $eggs ); ?> <?php $nest = $pterodactyl -> nest ( 4 ); $eggs = $nest -> eggs (); print_r ( $eggs ); ?>","title":"List eggs"},{"location":"application/egg/eggs/#list-eggs-with-application-api","text":"Get the collection of eggs of a nest.","title":"List Eggs with Application API"},{"location":"application/egg/eggs/#usage","text":"<?php $pterodactyl -> eggs ( $nestId ); //For a nest instance $nest -> eggs (); ?>","title":"Usage"},{"location":"application/egg/eggs/#parameters","text":"Parameter Description Rules nestId The id of the nest","title":"Parameters"},{"location":"application/egg/eggs/#returns","text":"[{ \"id\" : 14 , \"uuid\" : \"c8422123-65e1-4e21-8097-a7b7356714b7\" , \"nest\" : 4 , \"author\" : \"support@pterodactyl.io\" , \"description\" : \"The only aim in Rust is to survive. To do this you will need to overcome struggles such as hunger, thirst and cold. Build a fire. Build a shelter. Kill animals for meat. Protect yourself from other players, and kill them for meat. Create alliances with other players and form a town. Do whatever it takes to survive.\" , \"docker_image\" : null , \"config\" : { \"files\" : [], \"startup\" : { \"done\" : \"Server startup complete\" , \"userInteraction\" : [] }, \"stop\" : \"quit\" , \"logs\" : { \"custom\" : false , \"location\" : \"latest.log\" }, \"extends\" : null }, \"startup\" : \".\\/RustDedicated -batchmode +server.port {{SERVER_PORT}} +server.identity \\\"rust\\\" +rcon.port {{RCON_PORT}} +rcon.web true +server.hostname \\\\\\\"{{HOSTNAME}}\\\\\\\" +server.level \\\\\\\"{{LEVEL}}\\\\\\\" +server.description \\\\\\\"{{DESCRIPTION}}\\\\\\\" +server.url \\\\\\\"{{SERVER_URL}}\\\\\\\" +server.headerimage \\\\\\\"{{SERVER_IMG}}\\\\\\\" +server.worldsize \\\\\\\"{{WORLD_SIZE}}\\\\\\\" +server.seed \\\\\\\"{{WORLD_SEED}}\\\\\\\" +server.maxplayers {{MAX_PLAYERS}} +rcon.password \\\\\\\"{{RCON_PASS}}\\\\\\\" +server.saveinterval {{SAVEINTERVAL}} {{ADDITIONAL_ARGS}}\" , \"script\" : { \"privileged\" : true , \"install\" : \"apt update\\r\\napt -y --no-install-recommends install curl unzip lib32gcc1 ca-certificates\\r\\ncd \\/tmp\\r\\ncurl -sSL -o steamcmd.tar.gz http:\\/\\/media.steampowered.com\\/installer\\/steamcmd_linux.tar.gz\\r\\n\\r\\nmkdir -p \\/mnt\\/server\\/steam\\r\\ntar -xzvf steamcmd.tar.gz -C \\/mnt\\/server\\/steam\\r\\ncd \\/mnt\\/server\\/steam\\r\\nchown -R root:root \\/mnt\\r\\n\\r\\nexport HOME=\\/mnt\\/server\\r\\n.\\/steamcmd.sh +login anonymous +force_install_dir \\/mnt\\/server +app_update 258550 +quit\\r\\nmkdir -p \\/mnt\\/server\\/.steam\\/sdk32\\r\\ncp -v \\/mnt\\/server\\/steam\\/linux32\\/steamclient.so \\/mnt\\/server\\/.steam\\/sdk32\\/steamclient.so\" , \"entry\" : \"bash\" , \"container\" : \"ubuntu:16.04\" , \"extends\" : null }, \"createdAt\" : \"2019-01-05T12:56:46+00:00\" , \"updatedAt\" : \"2019-02-16T02:33:50+00:00\" , \"object\" : \"egg\" , \"dockerImage\" : \"quay.io\\/pterodactyl\\/core:rust\" }]","title":"Returns"},{"location":"application/egg/eggs/#example","text":"<?php $eggs = $pterodactyl -> eggs ( 4 ); print_r ( $eggs ); ?> <?php $nest = $pterodactyl -> nest ( 4 ); $eggs = $nest -> eggs (); print_r ( $eggs ); ?>","title":"Example"},{"location":"application/location/create-location/","text":"Create Location with Application API \u00b6 Create a new location. Usage \u00b6 <?php $pterodactyl -> createLocation ( array $data ); ?> Parameters \u00b6 Parameter Description Rules data The data to create location data \u00b6 Parameter Description Rules short Short name required|string|between:1,60|unique:locations,short long Long name required|string|between:1,255 Returns \u00b6 Returns a location instance . { \"id\" : 3 , \"short\" : \"location-3\" , \"long\" : \"location-3\" , \"createdAt\" : \"2019-12-16T05:20:19+00:00\" , \"updatedAt\" : \"2019-12-16T05:20:19+00:00\" , \"object\" : \"location\" , \"meta\" : { \"resource\" : \"https://pterodactyl.panel/api/application/locations/2\" } } Example \u00b6 <?php $location = $pterodactyl -> createLocation ([ 'short' => 'location-3' , 'long' => 'location-3' ]); print_r ( $location ); ?>","title":"Create location"},{"location":"application/location/create-location/#create-location-with-application-api","text":"Create a new location.","title":"Create Location with Application API"},{"location":"application/location/create-location/#usage","text":"<?php $pterodactyl -> createLocation ( array $data ); ?>","title":"Usage"},{"location":"application/location/create-location/#parameters","text":"Parameter Description Rules data The data to create location","title":"Parameters"},{"location":"application/location/create-location/#data","text":"Parameter Description Rules short Short name required|string|between:1,60|unique:locations,short long Long name required|string|between:1,255","title":"data"},{"location":"application/location/create-location/#returns","text":"Returns a location instance . { \"id\" : 3 , \"short\" : \"location-3\" , \"long\" : \"location-3\" , \"createdAt\" : \"2019-12-16T05:20:19+00:00\" , \"updatedAt\" : \"2019-12-16T05:20:19+00:00\" , \"object\" : \"location\" , \"meta\" : { \"resource\" : \"https://pterodactyl.panel/api/application/locations/2\" } }","title":"Returns"},{"location":"application/location/create-location/#example","text":"<?php $location = $pterodactyl -> createLocation ([ 'short' => 'location-3' , 'long' => 'location-3' ]); print_r ( $location ); ?>","title":"Example"},{"location":"application/location/delete-location/","text":"Delete Location with Application API \u00b6 Delete the given location. Usage \u00b6 <?php $pterodactyl -> deleteLocation ( $locationId ); //For a location instance $location -> delete (); ?> Parameters \u00b6 Parameter Description Rules locationId The id of the location Returns \u00b6 None Throwing exception if failed. Example \u00b6 <?php try { $pterodactyl -> deleteLocation ( 3 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $location = $pterodactyl -> location ( 3 ); $location -> delete (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Delete location"},{"location":"application/location/delete-location/#delete-location-with-application-api","text":"Delete the given location.","title":"Delete Location with Application API"},{"location":"application/location/delete-location/#usage","text":"<?php $pterodactyl -> deleteLocation ( $locationId ); //For a location instance $location -> delete (); ?>","title":"Usage"},{"location":"application/location/delete-location/#parameters","text":"Parameter Description Rules locationId The id of the location","title":"Parameters"},{"location":"application/location/delete-location/#returns","text":"None Throwing exception if failed.","title":"Returns"},{"location":"application/location/delete-location/#example","text":"<?php try { $pterodactyl -> deleteLocation ( 3 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $location = $pterodactyl -> location ( 3 ); $location -> delete (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Example"},{"location":"application/location/location/","text":"Get Location with Application API \u00b6 Get a location instance. Usage \u00b6 <?php $pterodactyl -> location ( $locationId , $includes = []); ?> Parameters \u00b6 Parameter Description Rules locationId The id of the location includes The related data you want to query Returns \u00b6 Returns a location instance . { \"id\" : 1 , \"short\" : \"location-1\" , \"long\" : \"location-1\" , \"createdAt\" : \"2019-01-06T12:24:51+00:00\" , \"updatedAt\" : \"2019-10-29T12:25:05+00:00\" , \"object\" : \"location\" } Example \u00b6 <?php $location = $pterodactyl -> location ( 1 ); print_r ( $location ); ?>","title":"Get location"},{"location":"application/location/location/#get-location-with-application-api","text":"Get a location instance.","title":"Get Location with Application API"},{"location":"application/location/location/#usage","text":"<?php $pterodactyl -> location ( $locationId , $includes = []); ?>","title":"Usage"},{"location":"application/location/location/#parameters","text":"Parameter Description Rules locationId The id of the location includes The related data you want to query","title":"Parameters"},{"location":"application/location/location/#returns","text":"Returns a location instance . { \"id\" : 1 , \"short\" : \"location-1\" , \"long\" : \"location-1\" , \"createdAt\" : \"2019-01-06T12:24:51+00:00\" , \"updatedAt\" : \"2019-10-29T12:25:05+00:00\" , \"object\" : \"location\" }","title":"Returns"},{"location":"application/location/location/#example","text":"<?php $location = $pterodactyl -> location ( 1 ); print_r ( $location ); ?>","title":"Example"},{"location":"application/location/locations/","text":"List Locations with Application API \u00b6 Get the collection of locations. Usage \u00b6 <?php $pterodactyl -> locations ( int $page = 1 ); ?> Parameters \u00b6 Parameter Description Rules page The page number Returns \u00b6 { \"data\" : [{ \"id\" : 1 , \"short\" : \"location-1\" , \"long\" : \"location-1\" , \"createdAt\" : \"2019-01-06T12:24:51+00:00\" , \"updatedAt\" : \"2019-10-29T12:25:05+00:00\" , \"object\" : \"location\" }, { \"id\" : 2 , \"short\" : \"location-2\" , \"long\" : \"location-2\" , \"createdAt\" : \"2019-01-06T12:24:51+00:00\" , \"updatedAt\" : \"2019-10-29T12:25:05+00:00\" , \"object\" : \"location\" }], \"meta\" : { \"pagination\" : { \"total\" : 2 , \"count\" : 2 , \"per_page\" : 50 , \"current_page\" : 1 , \"total_pages\" : 1 , \"links\" : [] } } } Example \u00b6 <?php $locations = $pterodactyl -> locations (); print_r ( $locations ); ?>","title":"Get locations"},{"location":"application/location/locations/#list-locations-with-application-api","text":"Get the collection of locations.","title":"List Locations with Application API"},{"location":"application/location/locations/#usage","text":"<?php $pterodactyl -> locations ( int $page = 1 ); ?>","title":"Usage"},{"location":"application/location/locations/#parameters","text":"Parameter Description Rules page The page number","title":"Parameters"},{"location":"application/location/locations/#returns","text":"{ \"data\" : [{ \"id\" : 1 , \"short\" : \"location-1\" , \"long\" : \"location-1\" , \"createdAt\" : \"2019-01-06T12:24:51+00:00\" , \"updatedAt\" : \"2019-10-29T12:25:05+00:00\" , \"object\" : \"location\" }, { \"id\" : 2 , \"short\" : \"location-2\" , \"long\" : \"location-2\" , \"createdAt\" : \"2019-01-06T12:24:51+00:00\" , \"updatedAt\" : \"2019-10-29T12:25:05+00:00\" , \"object\" : \"location\" }], \"meta\" : { \"pagination\" : { \"total\" : 2 , \"count\" : 2 , \"per_page\" : 50 , \"current_page\" : 1 , \"total_pages\" : 1 , \"links\" : [] } } }","title":"Returns"},{"location":"application/location/locations/#example","text":"<?php $locations = $pterodactyl -> locations (); print_r ( $locations ); ?>","title":"Example"},{"location":"application/location/update-location/","text":"Update Location with Application API \u00b6 Update the given location. Usage \u00b6 <?php $pterodactyl -> updateLocation ( $locationId , array $data ); //For a location instance $location -> update ( array $data ); ?> Parameters \u00b6 Parameter Description Rules locationId The id of the location data The data to update location data \u00b6 Parameter Description Rules short Short name required|string|between:1,60|unique:locations,short long Long name required|string|between:1,255 Returns \u00b6 Returns a location instance . { \"id\" : 3 , \"short\" : \"location-4\" , \"long\" : \"location-4\" , \"createdAt\" : \"2019-12-16T05:20:19+00:00\" , \"updatedAt\" : \"2019-12-16T05:23:16+00:00\" , \"object\" : \"location\" } Example \u00b6 <?php $location = $pterodactyl -> updateLocation ( 3 , [ 'short' => 'location-4' , 'long' => 'location-4' ]); print_r ( $location ); ?> <?php try { $location = $pterodactyl -> location ( 3 ); $location -> update ([ 'short' => 'location-4' , 'long' => 'location-4' ]); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Update location"},{"location":"application/location/update-location/#update-location-with-application-api","text":"Update the given location.","title":"Update Location with Application API"},{"location":"application/location/update-location/#usage","text":"<?php $pterodactyl -> updateLocation ( $locationId , array $data ); //For a location instance $location -> update ( array $data ); ?>","title":"Usage"},{"location":"application/location/update-location/#parameters","text":"Parameter Description Rules locationId The id of the location data The data to update location","title":"Parameters"},{"location":"application/location/update-location/#data","text":"Parameter Description Rules short Short name required|string|between:1,60|unique:locations,short long Long name required|string|between:1,255","title":"data"},{"location":"application/location/update-location/#returns","text":"Returns a location instance . { \"id\" : 3 , \"short\" : \"location-4\" , \"long\" : \"location-4\" , \"createdAt\" : \"2019-12-16T05:20:19+00:00\" , \"updatedAt\" : \"2019-12-16T05:23:16+00:00\" , \"object\" : \"location\" }","title":"Returns"},{"location":"application/location/update-location/#example","text":"<?php $location = $pterodactyl -> updateLocation ( 3 , [ 'short' => 'location-4' , 'long' => 'location-4' ]); print_r ( $location ); ?> <?php try { $location = $pterodactyl -> location ( 3 ); $location -> update ([ 'short' => 'location-4' , 'long' => 'location-4' ]); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Example"},{"location":"application/nest/nest/","text":"Get nest with Application API \u00b6 Get a nest instance. Usage \u00b6 <?php $pterodactyl -> nest ( $nestId , $includes = []); ?> Parameters \u00b6 Parameter Description Rules nestId The id of the nest includes The related data you want to query Returns \u00b6 Returns a nest instance . { \"id\" : 1 , \"uuid\" : \"9c212e4f-4dcb-445a-ae0a-2430a2eb81e5\" , \"author\" : \"support@pterodactyl.io\" , \"name\" : \"Minecraft\" , \"description\" : \"Minecraft - the classic game from Mojang. With support for Vanilla MC, Spigot, and many others!\" , \"createdAt\" : \"2019-01-05T12:56:46+00:00\" , \"updatedAt\" : \"2019-01-05T12:56:46+00:00\" , \"object\" : \"nest\" } Example \u00b6 <?php $nest = $pterodactyl -> nest ( 1 ); print_r ( $nest ); ?>","title":"Get nest"},{"location":"application/nest/nest/#get-nest-with-application-api","text":"Get a nest instance.","title":"Get nest with Application API"},{"location":"application/nest/nest/#usage","text":"<?php $pterodactyl -> nest ( $nestId , $includes = []); ?>","title":"Usage"},{"location":"application/nest/nest/#parameters","text":"Parameter Description Rules nestId The id of the nest includes The related data you want to query","title":"Parameters"},{"location":"application/nest/nest/#returns","text":"Returns a nest instance . { \"id\" : 1 , \"uuid\" : \"9c212e4f-4dcb-445a-ae0a-2430a2eb81e5\" , \"author\" : \"support@pterodactyl.io\" , \"name\" : \"Minecraft\" , \"description\" : \"Minecraft - the classic game from Mojang. With support for Vanilla MC, Spigot, and many others!\" , \"createdAt\" : \"2019-01-05T12:56:46+00:00\" , \"updatedAt\" : \"2019-01-05T12:56:46+00:00\" , \"object\" : \"nest\" }","title":"Returns"},{"location":"application/nest/nest/#example","text":"<?php $nest = $pterodactyl -> nest ( 1 ); print_r ( $nest ); ?>","title":"Example"},{"location":"application/nest/nests/","text":"List Nests with Application API \u00b6 Get the collection of nests. Usage \u00b6 <?php $pterodactyl -> nests ( int $page = 1 ); ?> Parameters \u00b6 Parameter Description Rules page The page number Returns \u00b6 { \"data\" : [{ \"id\" : 1 , \"uuid\" : \"9c212e4f-4dcb-445a-ae0a-2430a2eb81e5\" , \"author\" : \"support@pterodactyl.io\" , \"name\" : \"Minecraft\" , \"description\" : \"Minecraft - the classic game from Mojang. With support for Vanilla MC, Spigot, and many others!\" , \"createdAt\" : \"2019-01-05T12:56:46+00:00\" , \"updatedAt\" : \"2019-01-05T12:56:46+00:00\" , \"object\" : \"nest\" }, { \"id\" : 2 , \"uuid\" : \"29063c0f-36f0-4e64-84fb-f163c3e98892\" , \"author\" : \"support@pterodactyl.io\" , \"name\" : \"Source Engine\" , \"description\" : \"Includes support for most Source Dedicated Server games.\" , \"createdAt\" : \"2019-01-05T12:56:46+00:00\" , \"updatedAt\" : \"2019-01-05T12:56:46+00:00\" , \"object\" : \"nest\" }, { \"id\" : 3 , \"uuid\" : \"1a4aa82d-5368-4e04-9b8d-1ee77d4ec414\" , \"author\" : \"support@pterodactyl.io\" , \"name\" : \"Voice Servers\" , \"description\" : \"Voice servers such as Mumble and Teamspeak 3.\" , \"createdAt\" : \"2019-01-05T12:56:46+00:00\" , \"updatedAt\" : \"2019-01-05T12:56:46+00:00\" , \"object\" : \"nest\" }, { \"id\" : 4 , \"uuid\" : \"43017190-4513-48c7-894a-cb058bb4ee07\" , \"author\" : \"support@pterodactyl.io\" , \"name\" : \"Rust\" , \"description\" : \"Rust - A game where you must fight to survive.\" , \"createdAt\" : \"2019-01-05T12:56:46+00:00\" , \"updatedAt\" : \"2019-01-05T12:56:46+00:00\" , \"object\" : \"nest\" }], \"meta\" : { \"pagination\" : { \"total\" : 4 , \"count\" : 4 , \"per_page\" : 50 , \"current_page\" : 1 , \"total_pages\" : 1 , \"links\" : [] } } } Example \u00b6 <?php $nests = $pterodactyl -> nests (); print_r ( $nests ); ?>","title":"List nests"},{"location":"application/nest/nests/#list-nests-with-application-api","text":"Get the collection of nests.","title":"List Nests with Application API"},{"location":"application/nest/nests/#usage","text":"<?php $pterodactyl -> nests ( int $page = 1 ); ?>","title":"Usage"},{"location":"application/nest/nests/#parameters","text":"Parameter Description Rules page The page number","title":"Parameters"},{"location":"application/nest/nests/#returns","text":"{ \"data\" : [{ \"id\" : 1 , \"uuid\" : \"9c212e4f-4dcb-445a-ae0a-2430a2eb81e5\" , \"author\" : \"support@pterodactyl.io\" , \"name\" : \"Minecraft\" , \"description\" : \"Minecraft - the classic game from Mojang. With support for Vanilla MC, Spigot, and many others!\" , \"createdAt\" : \"2019-01-05T12:56:46+00:00\" , \"updatedAt\" : \"2019-01-05T12:56:46+00:00\" , \"object\" : \"nest\" }, { \"id\" : 2 , \"uuid\" : \"29063c0f-36f0-4e64-84fb-f163c3e98892\" , \"author\" : \"support@pterodactyl.io\" , \"name\" : \"Source Engine\" , \"description\" : \"Includes support for most Source Dedicated Server games.\" , \"createdAt\" : \"2019-01-05T12:56:46+00:00\" , \"updatedAt\" : \"2019-01-05T12:56:46+00:00\" , \"object\" : \"nest\" }, { \"id\" : 3 , \"uuid\" : \"1a4aa82d-5368-4e04-9b8d-1ee77d4ec414\" , \"author\" : \"support@pterodactyl.io\" , \"name\" : \"Voice Servers\" , \"description\" : \"Voice servers such as Mumble and Teamspeak 3.\" , \"createdAt\" : \"2019-01-05T12:56:46+00:00\" , \"updatedAt\" : \"2019-01-05T12:56:46+00:00\" , \"object\" : \"nest\" }, { \"id\" : 4 , \"uuid\" : \"43017190-4513-48c7-894a-cb058bb4ee07\" , \"author\" : \"support@pterodactyl.io\" , \"name\" : \"Rust\" , \"description\" : \"Rust - A game where you must fight to survive.\" , \"createdAt\" : \"2019-01-05T12:56:46+00:00\" , \"updatedAt\" : \"2019-01-05T12:56:46+00:00\" , \"object\" : \"nest\" }], \"meta\" : { \"pagination\" : { \"total\" : 4 , \"count\" : 4 , \"per_page\" : 50 , \"current_page\" : 1 , \"total_pages\" : 1 , \"links\" : [] } } }","title":"Returns"},{"location":"application/nest/nests/#example","text":"<?php $nests = $pterodactyl -> nests (); print_r ( $nests ); ?>","title":"Example"},{"location":"application/node/delete-node/","text":"Delete Node with Application API \u00b6 Delete the given node. Usage \u00b6 <?php $pterodactyl -> deleteNode ( $nodeId ); //For a node instance $node -> delete (); ?> Parameters \u00b6 Parameter Description Rules nodeId The id of the node Returns \u00b6 None Throwing exception if failed. Example \u00b6 <?php try { $pterodactyl -> deleteNode ( 3 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $node = $pterodactyl -> node ( 3 ); $node -> delete (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Delete node"},{"location":"application/node/delete-node/#delete-node-with-application-api","text":"Delete the given node.","title":"Delete Node with Application API"},{"location":"application/node/delete-node/#usage","text":"<?php $pterodactyl -> deleteNode ( $nodeId ); //For a node instance $node -> delete (); ?>","title":"Usage"},{"location":"application/node/delete-node/#parameters","text":"Parameter Description Rules nodeId The id of the node","title":"Parameters"},{"location":"application/node/delete-node/#returns","text":"None Throwing exception if failed.","title":"Returns"},{"location":"application/node/delete-node/#example","text":"<?php try { $pterodactyl -> deleteNode ( 3 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $node = $pterodactyl -> node ( 3 ); $node -> delete (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Example"},{"location":"application/node/node/","text":"Get Node with Application API \u00b6 Get a node instance. Usage \u00b6 <?php $pterodactyl -> node ( $nodeId , $includes = []); ?> Parameters \u00b6 Parameter Description Rules nodeId The id of the node includes The related data you want to query Returns \u00b6 Returns a node instance . { \"id\" : 1 , \"public\" : true , \"name\" : \"location-1\" , \"description\" : \"location-1\" , \"locationId\" : 1 , \"fqdn\" : \"location-1.pterodactyl.panel\" , \"scheme\" : \"https\" , \"behindProxy\" : false , \"maintenanceMode\" : false , \"memory\" : 10240 , \"memoryOverallocate\" : 0 , \"disk\" : 102400 , \"diskOverallocate\" : 0 , \"uploadSize\" : 100 , \"daemonListen\" : 8084 , \"daemonSftp\" : 2022 , \"daemonBase\" : \"\\/srv\\/daemon-data\" , \"createdAt\" : \"2019-01-06T12:40:08+00:00\" , \"updatedAt\" : \"2019-10-29T12:24:28+00:00\" , \"object\" : \"node\" } Example \u00b6 <?php $node = $pterodactyl -> node ( 1 ); print_r ( $node ); ?>","title":"Get node"},{"location":"application/node/node/#get-node-with-application-api","text":"Get a node instance.","title":"Get Node with Application API"},{"location":"application/node/node/#usage","text":"<?php $pterodactyl -> node ( $nodeId , $includes = []); ?>","title":"Usage"},{"location":"application/node/node/#parameters","text":"Parameter Description Rules nodeId The id of the node includes The related data you want to query","title":"Parameters"},{"location":"application/node/node/#returns","text":"Returns a node instance . { \"id\" : 1 , \"public\" : true , \"name\" : \"location-1\" , \"description\" : \"location-1\" , \"locationId\" : 1 , \"fqdn\" : \"location-1.pterodactyl.panel\" , \"scheme\" : \"https\" , \"behindProxy\" : false , \"maintenanceMode\" : false , \"memory\" : 10240 , \"memoryOverallocate\" : 0 , \"disk\" : 102400 , \"diskOverallocate\" : 0 , \"uploadSize\" : 100 , \"daemonListen\" : 8084 , \"daemonSftp\" : 2022 , \"daemonBase\" : \"\\/srv\\/daemon-data\" , \"createdAt\" : \"2019-01-06T12:40:08+00:00\" , \"updatedAt\" : \"2019-10-29T12:24:28+00:00\" , \"object\" : \"node\" }","title":"Returns"},{"location":"application/node/node/#example","text":"<?php $node = $pterodactyl -> node ( 1 ); print_r ( $node ); ?>","title":"Example"},{"location":"application/node/nodes/","text":"List Nodes with Application API \u00b6 Get the collection of nodes. Usage \u00b6 <?php $pterodactyl -> nodes ( int $page = 1 ); ?> Parameters \u00b6 Parameter Description Rules page The page number Returns \u00b6 { \"data\" : [{ \"id\" : 1 , \"public\" : true , \"name\" : \"location-1\" , \"description\" : \"location-1\" , \"locationId\" : 1 , \"fqdn\" : \"location-1.pterodactyl.panel\" , \"scheme\" : \"https\" , \"behindProxy\" : false , \"maintenanceMode\" : false , \"memory\" : 10240 , \"memoryOverallocate\" : 0 , \"disk\" : 102400 , \"diskOverallocate\" : 0 , \"uploadSize\" : 100 , \"daemonListen\" : 8084 , \"daemonSftp\" : 2022 , \"daemonBase\" : \"\\/srv\\/daemon-data\" , \"createdAt\" : \"2019-01-06T12:40:08+00:00\" , \"updatedAt\" : \"2019-10-29T12:24:28+00:00\" , \"object\" : \"node\" }], \"meta\" : { \"pagination\" : { \"total\" : 1 , \"count\" : 1 , \"per_page\" : 50 , \"current_page\" : 1 , \"total_pages\" : 1 , \"links\" : [] } } } Example \u00b6 <?php $nodes = $pterodactyl -> nodes (); print_r ( $nodes ); ?>","title":"List nodes"},{"location":"application/node/nodes/#list-nodes-with-application-api","text":"Get the collection of nodes.","title":"List Nodes with Application API"},{"location":"application/node/nodes/#usage","text":"<?php $pterodactyl -> nodes ( int $page = 1 ); ?>","title":"Usage"},{"location":"application/node/nodes/#parameters","text":"Parameter Description Rules page The page number","title":"Parameters"},{"location":"application/node/nodes/#returns","text":"{ \"data\" : [{ \"id\" : 1 , \"public\" : true , \"name\" : \"location-1\" , \"description\" : \"location-1\" , \"locationId\" : 1 , \"fqdn\" : \"location-1.pterodactyl.panel\" , \"scheme\" : \"https\" , \"behindProxy\" : false , \"maintenanceMode\" : false , \"memory\" : 10240 , \"memoryOverallocate\" : 0 , \"disk\" : 102400 , \"diskOverallocate\" : 0 , \"uploadSize\" : 100 , \"daemonListen\" : 8084 , \"daemonSftp\" : 2022 , \"daemonBase\" : \"\\/srv\\/daemon-data\" , \"createdAt\" : \"2019-01-06T12:40:08+00:00\" , \"updatedAt\" : \"2019-10-29T12:24:28+00:00\" , \"object\" : \"node\" }], \"meta\" : { \"pagination\" : { \"total\" : 1 , \"count\" : 1 , \"per_page\" : 50 , \"current_page\" : 1 , \"total_pages\" : 1 , \"links\" : [] } } }","title":"Returns"},{"location":"application/node/nodes/#example","text":"<?php $nodes = $pterodactyl -> nodes (); print_r ( $nodes ); ?>","title":"Example"},{"location":"application/server/create-server/","text":"Create Server with Application API \u00b6 Create a new server. Usage \u00b6 <?php $pterodactyl -> createServer ( array $data ); ?> Parameters \u00b6 Parameter Description Rules data The data to create server data \u00b6 Parameter Description Rules external_id External id sometimes|nullable|string|between:1,191|unique:servers name Name required|string|min:1|max:255 user Server owner's user id required|integer|exists:users,id description Description sometimes|string egg Egg id required|exists:eggs,id pack Pack id sometimes|nullable|numeric|min:0 docker_image Docker image sometimes|string|max:255 startup Startup command required|string limits Limits required|array limits.memory Memory limit required|numeric|min:0 limits.swap Swap limit required|numeric|min:-1 limits.disk Disk limit required|numeric|min:0 limits.io IO limit required|numeric|between:10,1000 limits.cpu CPU limit required|numeric|min:0 feature_limits Feature limits required|array feature_limits.databases Database limit present|nullable|integer|min:0 feature_limits.allocations Allocation limit present|nullable|integer|min:0 environment Environment variables of the egg present|array allocation Allocation ids sometimes|array allocation.default Default allocation id sometimes|bail|unique:servers|exists:allocations,id allocation.additional Additional allocation ids sometimes|array allocation.additional.* Additional allocation id exists:allocations,id deploy Deploy information sometimes|required|array deploy.locations Deploy locations array deploy.locations.* Deploy location integer|min:1 deploy.dedicated_ip Use dedicated ip or not required_with:deploy,boolean deploy.port_range Port ranges array deploy.port_range.* Port range string start_on_completion Start server after finished installation or not sometimes|boolean skip_scripts Skip egg scripts or not sometimes|boolean oom_disabled Disable oom killer or not sometimes|boolean Returns \u00b6 Returns a server instance . { \"id\" : 14 , \"externalId\" : 11 , \"uuid\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" , \"identifier\" : \"76c59598\" , \"node\" : 1 , \"name\" : \"server1\" , \"description\" : \"\" , \"suspended\" : false , \"pack\" : null , \"createdAt\" : \"2019-01-23T04:38:09+00:00\" , \"updatedAt\" : \"2019-08-05T09:36:13+00:00\" , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 256 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [{ \"id\" : 55 , \"nodeId\" : null , \"ip\" : \"123.123.123.123\" , \"ipAlias\" : null , \"port\" : 50053 , \"serverId\" : null , \"createdAt\" : null , \"updatedAt\" : null , \"object\" : \"allocation\" , \"alias\" : \"node-1.pterodactyl.panel\" , \"assigned\" : true }], \"object\" : \"server\" , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 }, \"user\" : 1 , \"allocation\" : 55 , \"nest\" : 8 , \"egg\" : 20 , \"container\" : { \"startup_command\" : \".\\/Jcmp-Server\" , \"image\" : \"hcgcloud\\/pterodactyl-jc2mp:latest\" , \"installed\" : false , \"environment\" : { \"SERVER_AUTOUPDATE\" : \"0\" , \"STARTUP\" : \".\\/Jcmp-Server\" , \"P_SERVER_LOCATION\" : \"test\" , \"P_SERVER_UUID\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" } }, \"relationships\" : { \"allocations\" : { \"object\" : \"list\" , \"data\" : [{ \"object\" : \"allocation\" , \"attributes\" : { \"id\" : 55 , \"ip\" : \"123.123.123.123\" , \"alias\" : \"node-1.pterodactyl.panel\" , \"port\" : 50053 , \"assigned\" : true } }] } } } Example \u00b6 <?php $nest_id = 1 ; $egg_id = 5 ; $location_id = 1 ; $egg = $pterodactyl -> egg ( $nest_id , $egg_id ); //get docker_image and startup directly from egg $server = $pterodactyl -> createServer ([ \"external_id\" => '11' , \"name\" => $name , \"user\" => 1 , \"egg\" => $egg_id , \"docker_image\" => $egg -> dockerImage , \"skip_scripts\" => false , \"environment\" => [ \"SERVER_AUTOUPDATE\" => '1' ], \"limits\" => [ \"memory\" => 256 , \"swap\" => 0 , \"disk\" => 1024 , \"io\" => 500 , \"cpu\" => 100 ], \"feature_limits\" => [ \"databases\" => 1 , \"allocations\" => 2 ], \"startup\" => $egg -> startup , \"description\" => \"\" , \"deploy\" => [ \"locations\" => [ $location_id ], \"dedicated_ip\" => false , \"port_range\" => [] ], \"start_on_completion\" => true ]); print_r ( $server ); ?>","title":"Create server"},{"location":"application/server/create-server/#create-server-with-application-api","text":"Create a new server.","title":"Create Server with Application API"},{"location":"application/server/create-server/#usage","text":"<?php $pterodactyl -> createServer ( array $data ); ?>","title":"Usage"},{"location":"application/server/create-server/#parameters","text":"Parameter Description Rules data The data to create server","title":"Parameters"},{"location":"application/server/create-server/#data","text":"Parameter Description Rules external_id External id sometimes|nullable|string|between:1,191|unique:servers name Name required|string|min:1|max:255 user Server owner's user id required|integer|exists:users,id description Description sometimes|string egg Egg id required|exists:eggs,id pack Pack id sometimes|nullable|numeric|min:0 docker_image Docker image sometimes|string|max:255 startup Startup command required|string limits Limits required|array limits.memory Memory limit required|numeric|min:0 limits.swap Swap limit required|numeric|min:-1 limits.disk Disk limit required|numeric|min:0 limits.io IO limit required|numeric|between:10,1000 limits.cpu CPU limit required|numeric|min:0 feature_limits Feature limits required|array feature_limits.databases Database limit present|nullable|integer|min:0 feature_limits.allocations Allocation limit present|nullable|integer|min:0 environment Environment variables of the egg present|array allocation Allocation ids sometimes|array allocation.default Default allocation id sometimes|bail|unique:servers|exists:allocations,id allocation.additional Additional allocation ids sometimes|array allocation.additional.* Additional allocation id exists:allocations,id deploy Deploy information sometimes|required|array deploy.locations Deploy locations array deploy.locations.* Deploy location integer|min:1 deploy.dedicated_ip Use dedicated ip or not required_with:deploy,boolean deploy.port_range Port ranges array deploy.port_range.* Port range string start_on_completion Start server after finished installation or not sometimes|boolean skip_scripts Skip egg scripts or not sometimes|boolean oom_disabled Disable oom killer or not sometimes|boolean","title":"data"},{"location":"application/server/create-server/#returns","text":"Returns a server instance . { \"id\" : 14 , \"externalId\" : 11 , \"uuid\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" , \"identifier\" : \"76c59598\" , \"node\" : 1 , \"name\" : \"server1\" , \"description\" : \"\" , \"suspended\" : false , \"pack\" : null , \"createdAt\" : \"2019-01-23T04:38:09+00:00\" , \"updatedAt\" : \"2019-08-05T09:36:13+00:00\" , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 256 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [{ \"id\" : 55 , \"nodeId\" : null , \"ip\" : \"123.123.123.123\" , \"ipAlias\" : null , \"port\" : 50053 , \"serverId\" : null , \"createdAt\" : null , \"updatedAt\" : null , \"object\" : \"allocation\" , \"alias\" : \"node-1.pterodactyl.panel\" , \"assigned\" : true }], \"object\" : \"server\" , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 }, \"user\" : 1 , \"allocation\" : 55 , \"nest\" : 8 , \"egg\" : 20 , \"container\" : { \"startup_command\" : \".\\/Jcmp-Server\" , \"image\" : \"hcgcloud\\/pterodactyl-jc2mp:latest\" , \"installed\" : false , \"environment\" : { \"SERVER_AUTOUPDATE\" : \"0\" , \"STARTUP\" : \".\\/Jcmp-Server\" , \"P_SERVER_LOCATION\" : \"test\" , \"P_SERVER_UUID\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" } }, \"relationships\" : { \"allocations\" : { \"object\" : \"list\" , \"data\" : [{ \"object\" : \"allocation\" , \"attributes\" : { \"id\" : 55 , \"ip\" : \"123.123.123.123\" , \"alias\" : \"node-1.pterodactyl.panel\" , \"port\" : 50053 , \"assigned\" : true } }] } } }","title":"Returns"},{"location":"application/server/create-server/#example","text":"<?php $nest_id = 1 ; $egg_id = 5 ; $location_id = 1 ; $egg = $pterodactyl -> egg ( $nest_id , $egg_id ); //get docker_image and startup directly from egg $server = $pterodactyl -> createServer ([ \"external_id\" => '11' , \"name\" => $name , \"user\" => 1 , \"egg\" => $egg_id , \"docker_image\" => $egg -> dockerImage , \"skip_scripts\" => false , \"environment\" => [ \"SERVER_AUTOUPDATE\" => '1' ], \"limits\" => [ \"memory\" => 256 , \"swap\" => 0 , \"disk\" => 1024 , \"io\" => 500 , \"cpu\" => 100 ], \"feature_limits\" => [ \"databases\" => 1 , \"allocations\" => 2 ], \"startup\" => $egg -> startup , \"description\" => \"\" , \"deploy\" => [ \"locations\" => [ $location_id ], \"dedicated_ip\" => false , \"port_range\" => [] ], \"start_on_completion\" => true ]); print_r ( $server ); ?>","title":"Example"},{"location":"application/server/delete-server/","text":"Delete Server with Application API \u00b6 Delete the given server. Usage \u00b6 <?php $pterodactyl -> deleteServer ( $serverId ); //For a server instance $server -> delete (); ?> Parameters \u00b6 Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server Returns \u00b6 None Throwing exception if failed. Example \u00b6 <?php try { $pterodactyl -> deleteServer ( 14 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> server ( 14 ); $server -> delete (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Delete server"},{"location":"application/server/delete-server/#delete-server-with-application-api","text":"Delete the given server.","title":"Delete Server with Application API"},{"location":"application/server/delete-server/#usage","text":"<?php $pterodactyl -> deleteServer ( $serverId ); //For a server instance $server -> delete (); ?>","title":"Usage"},{"location":"application/server/delete-server/#parameters","text":"Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server","title":"Parameters"},{"location":"application/server/delete-server/#returns","text":"None Throwing exception if failed.","title":"Returns"},{"location":"application/server/delete-server/#example","text":"<?php try { $pterodactyl -> deleteServer ( 14 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> server ( 14 ); $server -> delete (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Example"},{"location":"application/server/force-delete-server/","text":"Force delete Server with Application API \u00b6 Force delete the given server. Usage \u00b6 <?php $pterodactyl -> forceDeleteServer ( $serverId ); //For a server instance $server -> forceDelete (); ?> Parameters \u00b6 Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server Returns \u00b6 None Throwing exception if failed. Example \u00b6 <?php try { $pterodactyl -> forceDeleteServer ( 14 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> server ( 14 ); $server -> forceDelete (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Force delete server"},{"location":"application/server/force-delete-server/#force-delete-server-with-application-api","text":"Force delete the given server.","title":"Force delete Server with Application API"},{"location":"application/server/force-delete-server/#usage","text":"<?php $pterodactyl -> forceDeleteServer ( $serverId ); //For a server instance $server -> forceDelete (); ?>","title":"Usage"},{"location":"application/server/force-delete-server/#parameters","text":"Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server","title":"Parameters"},{"location":"application/server/force-delete-server/#returns","text":"None Throwing exception if failed.","title":"Returns"},{"location":"application/server/force-delete-server/#example","text":"<?php try { $pterodactyl -> forceDeleteServer ( 14 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> server ( 14 ); $server -> forceDelete (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Example"},{"location":"application/server/rebuild-server/","text":"Rebuild Server with Application API \u00b6 Rebuild the given server. Usage \u00b6 <?php $pterodactyl -> rebuildServer ( $serverId ); //For a server instance $server -> rebuild (); ?> Parameters \u00b6 Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server Returns \u00b6 None Throwing exception if failed. Example \u00b6 <?php try { $pterodactyl -> rebuildServer ( 14 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> server ( 14 ); $server -> rebuild (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Rebuild server"},{"location":"application/server/rebuild-server/#rebuild-server-with-application-api","text":"Rebuild the given server.","title":"Rebuild Server with Application API"},{"location":"application/server/rebuild-server/#usage","text":"<?php $pterodactyl -> rebuildServer ( $serverId ); //For a server instance $server -> rebuild (); ?>","title":"Usage"},{"location":"application/server/rebuild-server/#parameters","text":"Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server","title":"Parameters"},{"location":"application/server/rebuild-server/#returns","text":"None Throwing exception if failed.","title":"Returns"},{"location":"application/server/rebuild-server/#example","text":"<?php try { $pterodactyl -> rebuildServer ( 14 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> server ( 14 ); $server -> rebuild (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Example"},{"location":"application/server/reinstall-server/","text":"Reinstall Server with Application API \u00b6 Reinstall the given server. Usage \u00b6 <?php $pterodactyl -> reinstallServer ( $serverId ); //For a server instance $server -> reinstall (); ?> Parameters \u00b6 Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server Returns \u00b6 None Throwing exception if failed. Example \u00b6 <?php try { $pterodactyl -> reinstallServer ( 14 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> server ( 14 ); $server -> reinstall (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Reinstall server"},{"location":"application/server/reinstall-server/#reinstall-server-with-application-api","text":"Reinstall the given server.","title":"Reinstall Server with Application API"},{"location":"application/server/reinstall-server/#usage","text":"<?php $pterodactyl -> reinstallServer ( $serverId ); //For a server instance $server -> reinstall (); ?>","title":"Usage"},{"location":"application/server/reinstall-server/#parameters","text":"Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server","title":"Parameters"},{"location":"application/server/reinstall-server/#returns","text":"None Throwing exception if failed.","title":"Returns"},{"location":"application/server/reinstall-server/#example","text":"<?php try { $pterodactyl -> reinstallServer ( 14 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> server ( 14 ); $server -> reinstall (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Example"},{"location":"application/server/server-ex/","text":"Get Server by External Id with Application API \u00b6 Get a server instance by external id, including it's allocations. Usage \u00b6 <?php $pterodactyl -> serverEx ( $externalId , $includes = []); ?> Parameters \u00b6 Note The externalId is the externalId of the server, not identifier , id or uuid . Parameter Description Rules externalId The externalId of the server includes The related data you want to query Returns \u00b6 Returns a server instance . { \"id\" : 14 , \"externalId\" : 11 , \"uuid\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" , \"identifier\" : \"76c59598\" , \"node\" : 1 , \"name\" : \"server1\" , \"description\" : \"\" , \"suspended\" : false , \"pack\" : null , \"createdAt\" : \"2019-01-23T04:38:09+00:00\" , \"updatedAt\" : \"2019-08-05T09:36:13+00:00\" , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 256 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [{ \"id\" : 55 , \"nodeId\" : null , \"ip\" : \"123.123.123.123\" , \"ipAlias\" : null , \"port\" : 50053 , \"serverId\" : null , \"createdAt\" : null , \"updatedAt\" : null , \"object\" : \"allocation\" , \"alias\" : \"node-1.pterodactyl.panel\" , \"assigned\" : true }], \"object\" : \"server\" , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 }, \"user\" : 1 , \"allocation\" : 55 , \"nest\" : 8 , \"egg\" : 20 , \"container\" : { \"startup_command\" : \".\\/Jcmp-Server\" , \"image\" : \"hcgcloud\\/pterodactyl-jc2mp:latest\" , \"installed\" : true , \"environment\" : { \"SERVER_AUTOUPDATE\" : \"0\" , \"STARTUP\" : \".\\/Jcmp-Server\" , \"P_SERVER_LOCATION\" : \"test\" , \"P_SERVER_UUID\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" } } } Example \u00b6 <?php $server = $pterodactyl -> serverEx ( 11 ); print_r ( $server ); ?>","title":"Get server by external id"},{"location":"application/server/server-ex/#get-server-by-external-id-with-application-api","text":"Get a server instance by external id, including it's allocations.","title":"Get Server by External Id with Application API"},{"location":"application/server/server-ex/#usage","text":"<?php $pterodactyl -> serverEx ( $externalId , $includes = []); ?>","title":"Usage"},{"location":"application/server/server-ex/#parameters","text":"Note The externalId is the externalId of the server, not identifier , id or uuid . Parameter Description Rules externalId The externalId of the server includes The related data you want to query","title":"Parameters"},{"location":"application/server/server-ex/#returns","text":"Returns a server instance . { \"id\" : 14 , \"externalId\" : 11 , \"uuid\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" , \"identifier\" : \"76c59598\" , \"node\" : 1 , \"name\" : \"server1\" , \"description\" : \"\" , \"suspended\" : false , \"pack\" : null , \"createdAt\" : \"2019-01-23T04:38:09+00:00\" , \"updatedAt\" : \"2019-08-05T09:36:13+00:00\" , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 256 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [{ \"id\" : 55 , \"nodeId\" : null , \"ip\" : \"123.123.123.123\" , \"ipAlias\" : null , \"port\" : 50053 , \"serverId\" : null , \"createdAt\" : null , \"updatedAt\" : null , \"object\" : \"allocation\" , \"alias\" : \"node-1.pterodactyl.panel\" , \"assigned\" : true }], \"object\" : \"server\" , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 }, \"user\" : 1 , \"allocation\" : 55 , \"nest\" : 8 , \"egg\" : 20 , \"container\" : { \"startup_command\" : \".\\/Jcmp-Server\" , \"image\" : \"hcgcloud\\/pterodactyl-jc2mp:latest\" , \"installed\" : true , \"environment\" : { \"SERVER_AUTOUPDATE\" : \"0\" , \"STARTUP\" : \".\\/Jcmp-Server\" , \"P_SERVER_LOCATION\" : \"test\" , \"P_SERVER_UUID\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" } } }","title":"Returns"},{"location":"application/server/server-ex/#example","text":"<?php $server = $pterodactyl -> serverEx ( 11 ); print_r ( $server ); ?>","title":"Example"},{"location":"application/server/server/","text":"Get Server with Application API \u00b6 Get a server instance, including it's allocations. Usage \u00b6 <?php $pterodactyl -> server ( $serverId , $includes = []); ?> Parameters \u00b6 Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server includes The related data you want to query Returns \u00b6 Returns a server instance . { \"id\" : 14 , \"externalId\" : null , \"uuid\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" , \"identifier\" : \"76c59598\" , \"node\" : 1 , \"name\" : \"server1\" , \"description\" : \"\" , \"suspended\" : false , \"pack\" : null , \"createdAt\" : \"2019-01-23T04:38:09+00:00\" , \"updatedAt\" : \"2019-08-05T09:36:13+00:00\" , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 256 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [{ \"id\" : 55 , \"nodeId\" : null , \"ip\" : \"123.123.123.123\" , \"ipAlias\" : null , \"port\" : 50053 , \"serverId\" : null , \"createdAt\" : null , \"updatedAt\" : null , \"object\" : \"allocation\" , \"alias\" : \"node-1.pterodactyl.panel\" , \"assigned\" : true }], \"object\" : \"server\" , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 }, \"user\" : 1 , \"allocation\" : 55 , \"nest\" : 8 , \"egg\" : 20 , \"container\" : { \"startup_command\" : \".\\/Jcmp-Server\" , \"image\" : \"hcgcloud\\/pterodactyl-jc2mp:latest\" , \"installed\" : true , \"environment\" : { \"SERVER_AUTOUPDATE\" : \"0\" , \"STARTUP\" : \".\\/Jcmp-Server\" , \"P_SERVER_LOCATION\" : \"test\" , \"P_SERVER_UUID\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" } } } Example \u00b6 <?php $server = $pterodactyl -> server ( 14 ); print_r ( $server ); ?>","title":"Get server"},{"location":"application/server/server/#get-server-with-application-api","text":"Get a server instance, including it's allocations.","title":"Get Server with Application API"},{"location":"application/server/server/#usage","text":"<?php $pterodactyl -> server ( $serverId , $includes = []); ?>","title":"Usage"},{"location":"application/server/server/#parameters","text":"Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server includes The related data you want to query","title":"Parameters"},{"location":"application/server/server/#returns","text":"Returns a server instance . { \"id\" : 14 , \"externalId\" : null , \"uuid\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" , \"identifier\" : \"76c59598\" , \"node\" : 1 , \"name\" : \"server1\" , \"description\" : \"\" , \"suspended\" : false , \"pack\" : null , \"createdAt\" : \"2019-01-23T04:38:09+00:00\" , \"updatedAt\" : \"2019-08-05T09:36:13+00:00\" , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 256 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [{ \"id\" : 55 , \"nodeId\" : null , \"ip\" : \"123.123.123.123\" , \"ipAlias\" : null , \"port\" : 50053 , \"serverId\" : null , \"createdAt\" : null , \"updatedAt\" : null , \"object\" : \"allocation\" , \"alias\" : \"node-1.pterodactyl.panel\" , \"assigned\" : true }], \"object\" : \"server\" , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 }, \"user\" : 1 , \"allocation\" : 55 , \"nest\" : 8 , \"egg\" : 20 , \"container\" : { \"startup_command\" : \".\\/Jcmp-Server\" , \"image\" : \"hcgcloud\\/pterodactyl-jc2mp:latest\" , \"installed\" : true , \"environment\" : { \"SERVER_AUTOUPDATE\" : \"0\" , \"STARTUP\" : \".\\/Jcmp-Server\" , \"P_SERVER_LOCATION\" : \"test\" , \"P_SERVER_UUID\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" } } }","title":"Returns"},{"location":"application/server/server/#example","text":"<?php $server = $pterodactyl -> server ( 14 ); print_r ( $server ); ?>","title":"Example"},{"location":"application/server/servers/","text":"List Servers with Application API \u00b6 Get the collection of servers. Usage \u00b6 <?php $pterodactyl -> servers ( int $page = 1 ); ?> Parameters \u00b6 Parameter Description Rules page The page number Returns \u00b6 { \"data\" : [{ \"id\" : 14 , \"externalId\" : null , \"uuid\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" , \"identifier\" : \"76c59598\" , \"node\" : 1 , \"name\" : \"server1\" , \"description\" : \"\" , \"suspended\" : false , \"pack\" : null , \"createdAt\" : \"2019-01-23T04:38:09+00:00\" , \"updatedAt\" : \"2019-08-05T09:36:13+00:00\" , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 256 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [], \"object\" : \"server\" , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 }, \"user\" : 1 , \"allocation\" : 55 , \"nest\" : 8 , \"egg\" : 20 , \"container\" : { \"startup_command\" : \".\\/Jcmp-Server\" , \"image\" : \"hcgcloud\\/pterodactyl-jc2mp:latest\" , \"installed\" : true , \"environment\" : { \"SERVER_AUTOUPDATE\" : \"0\" , \"STARTUP\" : \".\\/Jcmp-Server\" , \"P_SERVER_LOCATION\" : \"test\" , \"P_SERVER_UUID\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" } } }, { \"id\" : 20 , \"externalId\" : null , \"uuid\" : \"6928f121-45bf-4f95-869a-eaebf02cd2a6\" , \"identifier\" : \"6928f121\" , \"node\" : 1 , \"name\" : \"server2\" , \"description\" : \"\" , \"suspended\" : false , \"pack\" : null , \"createdAt\" : \"2019-01-23T11:18:57+00:00\" , \"updatedAt\" : \"2019-07-28T06:35:00+00:00\" , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 512 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [], \"object\" : \"server\" , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 }, \"user\" : 1 , \"allocation\" : 73 , \"nest\" : 9 , \"egg\" : 21 , \"container\" : { \"startup_command\" : \".\\/Server\" , \"image\" : \"hcgcloud\\/pterodactyl-jc3mp:latest\" , \"installed\" : true , \"environment\" : { \"SERVER_AUTOUPDATE\" : \"0\" , \"QUERY_PORT\" : \"50072\" , \"HTTP_PORT\" : \"50073\" , \"STARTUP\" : \".\\/Server\" , \"P_SERVER_LOCATION\" : \"test\" , \"P_SERVER_UUID\" : \"6928f121-45bf-4f95-869a-eaebf02cd2a6\" } } }], \"meta\" : { \"pagination\" : { \"total\" : 2 , \"count\" : 2 , \"per_page\" : 15 , \"current_page\" : 1 , \"total_pages\" : 1 , \"links\" : [] } } } Example \u00b6 <?php $server = $pterodactyl -> servers (); print_r ( $server ); ?>","title":"List servers"},{"location":"application/server/servers/#list-servers-with-application-api","text":"Get the collection of servers.","title":"List Servers with Application API"},{"location":"application/server/servers/#usage","text":"<?php $pterodactyl -> servers ( int $page = 1 ); ?>","title":"Usage"},{"location":"application/server/servers/#parameters","text":"Parameter Description Rules page The page number","title":"Parameters"},{"location":"application/server/servers/#returns","text":"{ \"data\" : [{ \"id\" : 14 , \"externalId\" : null , \"uuid\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" , \"identifier\" : \"76c59598\" , \"node\" : 1 , \"name\" : \"server1\" , \"description\" : \"\" , \"suspended\" : false , \"pack\" : null , \"createdAt\" : \"2019-01-23T04:38:09+00:00\" , \"updatedAt\" : \"2019-08-05T09:36:13+00:00\" , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 256 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [], \"object\" : \"server\" , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 }, \"user\" : 1 , \"allocation\" : 55 , \"nest\" : 8 , \"egg\" : 20 , \"container\" : { \"startup_command\" : \".\\/Jcmp-Server\" , \"image\" : \"hcgcloud\\/pterodactyl-jc2mp:latest\" , \"installed\" : true , \"environment\" : { \"SERVER_AUTOUPDATE\" : \"0\" , \"STARTUP\" : \".\\/Jcmp-Server\" , \"P_SERVER_LOCATION\" : \"test\" , \"P_SERVER_UUID\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" } } }, { \"id\" : 20 , \"externalId\" : null , \"uuid\" : \"6928f121-45bf-4f95-869a-eaebf02cd2a6\" , \"identifier\" : \"6928f121\" , \"node\" : 1 , \"name\" : \"server2\" , \"description\" : \"\" , \"suspended\" : false , \"pack\" : null , \"createdAt\" : \"2019-01-23T11:18:57+00:00\" , \"updatedAt\" : \"2019-07-28T06:35:00+00:00\" , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 512 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [], \"object\" : \"server\" , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 }, \"user\" : 1 , \"allocation\" : 73 , \"nest\" : 9 , \"egg\" : 21 , \"container\" : { \"startup_command\" : \".\\/Server\" , \"image\" : \"hcgcloud\\/pterodactyl-jc3mp:latest\" , \"installed\" : true , \"environment\" : { \"SERVER_AUTOUPDATE\" : \"0\" , \"QUERY_PORT\" : \"50072\" , \"HTTP_PORT\" : \"50073\" , \"STARTUP\" : \".\\/Server\" , \"P_SERVER_LOCATION\" : \"test\" , \"P_SERVER_UUID\" : \"6928f121-45bf-4f95-869a-eaebf02cd2a6\" } } }], \"meta\" : { \"pagination\" : { \"total\" : 2 , \"count\" : 2 , \"per_page\" : 15 , \"current_page\" : 1 , \"total_pages\" : 1 , \"links\" : [] } } }","title":"Returns"},{"location":"application/server/servers/#example","text":"<?php $server = $pterodactyl -> servers (); print_r ( $server ); ?>","title":"Example"},{"location":"application/server/suspend-server/","text":"Suspend Server with Application API \u00b6 Suspend the given server. Usage \u00b6 <?php $pterodactyl -> suspendServer ( $serverId ); //For a server instance $server -> suspend (); ?> Parameters \u00b6 Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server Returns \u00b6 None Throwing exception if failed. Example \u00b6 <?php try { $pterodactyl -> suspendServer ( 14 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> server ( 14 ); $server -> suspend (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Suspend server"},{"location":"application/server/suspend-server/#suspend-server-with-application-api","text":"Suspend the given server.","title":"Suspend Server with Application API"},{"location":"application/server/suspend-server/#usage","text":"<?php $pterodactyl -> suspendServer ( $serverId ); //For a server instance $server -> suspend (); ?>","title":"Usage"},{"location":"application/server/suspend-server/#parameters","text":"Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server","title":"Parameters"},{"location":"application/server/suspend-server/#returns","text":"None Throwing exception if failed.","title":"Returns"},{"location":"application/server/suspend-server/#example","text":"<?php try { $pterodactyl -> suspendServer ( 14 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> server ( 14 ); $server -> suspend (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Example"},{"location":"application/server/unsuspend-server/","text":"Unsuspend Server with Application API \u00b6 Unsuspend the given server. Usage \u00b6 <?php $pterodactyl -> unsuspendServer ( $serverId ); //For a server instance $server -> unsuspend (); ?> Parameters \u00b6 Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server Returns \u00b6 None Throwing exception if failed. Example \u00b6 <?php try { $pterodactyl -> unsuspendServer ( 14 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> server ( 14 ); $server -> unsuspend (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Unsuspend server"},{"location":"application/server/unsuspend-server/#unsuspend-server-with-application-api","text":"Unsuspend the given server.","title":"Unsuspend Server with Application API"},{"location":"application/server/unsuspend-server/#usage","text":"<?php $pterodactyl -> unsuspendServer ( $serverId ); //For a server instance $server -> unsuspend (); ?>","title":"Usage"},{"location":"application/server/unsuspend-server/#parameters","text":"Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server","title":"Parameters"},{"location":"application/server/unsuspend-server/#returns","text":"None Throwing exception if failed.","title":"Returns"},{"location":"application/server/unsuspend-server/#example","text":"<?php try { $pterodactyl -> unsuspendServer ( 14 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> server ( 14 ); $server -> unsuspend (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Example"},{"location":"application/server/update-server-build/","text":"Update Server Build with Application API \u00b6 Documentation isn't ready yet... Will be soon though!","title":"Update server build"},{"location":"application/server/update-server-build/#update-server-build-with-application-api","text":"Documentation isn't ready yet... Will be soon though!","title":"Update Server Build with Application API"},{"location":"application/server/update-server-details/","text":"Update Server Details with Application API \u00b6 Update details of the given server. Usage \u00b6 <?php $pterodactyl -> updateServerDetails ( $serverId , array $data ); //For a server instance $server -> updateDetails ( array $data ); ?> Parameters \u00b6 Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server data The data you want to update data \u00b6 Parameter Description Rules external_id External id sometimes|nullable|string|between:1,191|unique:servers name Name required|string|min:1|max:255 user Server owner's user id required|integer|exists:users,id description Description sometimes|nullable|string Returns \u00b6 Returns a server instance . { \"id\" : 14 , \"externalId\" : null , \"uuid\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" , \"identifier\" : \"76c59598\" , \"node\" : 1 , \"name\" : \"server1\" , \"description\" : \"\" , \"suspended\" : false , \"pack\" : null , \"createdAt\" : \"2019-01-23T04:38:09+00:00\" , \"updatedAt\" : \"2019-08-05T09:36:13+00:00\" , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 256 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [{ \"id\" : 55 , \"nodeId\" : null , \"ip\" : \"123.123.123.123\" , \"ipAlias\" : null , \"port\" : 50053 , \"serverId\" : null , \"createdAt\" : null , \"updatedAt\" : null , \"object\" : \"allocation\" , \"alias\" : \"node-1.pterodactyl.panel\" , \"assigned\" : true }], \"object\" : \"server\" , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 }, \"user\" : 1 , \"allocation\" : 55 , \"nest\" : 8 , \"egg\" : 20 , \"container\" : { \"startup_command\" : \".\\/Jcmp-Server\" , \"image\" : \"hcgcloud\\/pterodactyl-jc2mp:latest\" , \"installed\" : true , \"environment\" : { \"SERVER_AUTOUPDATE\" : \"0\" , \"STARTUP\" : \".\\/Jcmp-Server\" , \"P_SERVER_LOCATION\" : \"test\" , \"P_SERVER_UUID\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" } }, \"relationships\" : { \"allocations\" : { \"object\" : \"list\" , \"data\" : [{ \"object\" : \"allocation\" , \"attributes\" : { \"id\" : 55 , \"ip\" : \"123.123.123.123\" , \"alias\" : \"node-1.pterodactyl.panel\" , \"port\" : 50053 , \"assigned\" : true } }] } } } Example \u00b6 <?php try { $pterodactyl -> updateServerDetails ( 14 , [ 'name' => 'newserver' , 'user' => 1 , 'description' => 'mynewdescription' ]); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> server ( 14 ); $server -> updateDetails ([ 'name' => 'newserver' , 'user' => 1 , 'description' => 'mynewdescription' ]); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Update server details"},{"location":"application/server/update-server-details/#update-server-details-with-application-api","text":"Update details of the given server.","title":"Update Server Details with Application API"},{"location":"application/server/update-server-details/#usage","text":"<?php $pterodactyl -> updateServerDetails ( $serverId , array $data ); //For a server instance $server -> updateDetails ( array $data ); ?>","title":"Usage"},{"location":"application/server/update-server-details/#parameters","text":"Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server data The data you want to update","title":"Parameters"},{"location":"application/server/update-server-details/#data","text":"Parameter Description Rules external_id External id sometimes|nullable|string|between:1,191|unique:servers name Name required|string|min:1|max:255 user Server owner's user id required|integer|exists:users,id description Description sometimes|nullable|string","title":"data"},{"location":"application/server/update-server-details/#returns","text":"Returns a server instance . { \"id\" : 14 , \"externalId\" : null , \"uuid\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" , \"identifier\" : \"76c59598\" , \"node\" : 1 , \"name\" : \"server1\" , \"description\" : \"\" , \"suspended\" : false , \"pack\" : null , \"createdAt\" : \"2019-01-23T04:38:09+00:00\" , \"updatedAt\" : \"2019-08-05T09:36:13+00:00\" , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 256 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [{ \"id\" : 55 , \"nodeId\" : null , \"ip\" : \"123.123.123.123\" , \"ipAlias\" : null , \"port\" : 50053 , \"serverId\" : null , \"createdAt\" : null , \"updatedAt\" : null , \"object\" : \"allocation\" , \"alias\" : \"node-1.pterodactyl.panel\" , \"assigned\" : true }], \"object\" : \"server\" , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 }, \"user\" : 1 , \"allocation\" : 55 , \"nest\" : 8 , \"egg\" : 20 , \"container\" : { \"startup_command\" : \".\\/Jcmp-Server\" , \"image\" : \"hcgcloud\\/pterodactyl-jc2mp:latest\" , \"installed\" : true , \"environment\" : { \"SERVER_AUTOUPDATE\" : \"0\" , \"STARTUP\" : \".\\/Jcmp-Server\" , \"P_SERVER_LOCATION\" : \"test\" , \"P_SERVER_UUID\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" } }, \"relationships\" : { \"allocations\" : { \"object\" : \"list\" , \"data\" : [{ \"object\" : \"allocation\" , \"attributes\" : { \"id\" : 55 , \"ip\" : \"123.123.123.123\" , \"alias\" : \"node-1.pterodactyl.panel\" , \"port\" : 50053 , \"assigned\" : true } }] } } }","title":"Returns"},{"location":"application/server/update-server-details/#example","text":"<?php try { $pterodactyl -> updateServerDetails ( 14 , [ 'name' => 'newserver' , 'user' => 1 , 'description' => 'mynewdescription' ]); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> server ( 14 ); $server -> updateDetails ([ 'name' => 'newserver' , 'user' => 1 , 'description' => 'mynewdescription' ]); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Example"},{"location":"application/server/update-server-startup/","text":"Update Server Startup with Application API \u00b6 Update startup of the given server. Usage \u00b6 <?php $pterodactyl -> updateServerStartup ( $serverId , array $data ); //For a server instance $server -> updateStartup ( array $data ); ?> Parameters \u00b6 Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server data The data you want to update data \u00b6 Parameter Description Rules startup Startup command required|string environment Environment variables present|array egg Egg id required|exists:eggs,id pack Pack id sometimes|nullable|numeric|min:0 image Docker image required|string|max:255 skip_scripts Skip egg scripts or not present|boolean Returns \u00b6 Returns a server instance . { \"id\" : 14 , \"externalId\" : null , \"uuid\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" , \"identifier\" : \"76c59598\" , \"node\" : 1 , \"name\" : \"server1\" , \"description\" : \"\" , \"suspended\" : false , \"pack\" : null , \"createdAt\" : \"2019-01-23T04:38:09+00:00\" , \"updatedAt\" : \"2019-08-05T09:36:13+00:00\" , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 256 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [{ \"id\" : 55 , \"nodeId\" : null , \"ip\" : \"123.123.123.123\" , \"ipAlias\" : null , \"port\" : 50053 , \"serverId\" : null , \"createdAt\" : null , \"updatedAt\" : null , \"object\" : \"allocation\" , \"alias\" : \"node-1.pterodactyl.panel\" , \"assigned\" : true }], \"object\" : \"server\" , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 }, \"user\" : 1 , \"allocation\" : 55 , \"nest\" : 8 , \"egg\" : 20 , \"container\" : { \"startup_command\" : \".\\/Jcmp-Server\" , \"image\" : \"hcgcloud\\/pterodactyl-jc2mp:latest\" , \"installed\" : true , \"environment\" : { \"SERVER_AUTOUPDATE\" : \"0\" , \"STARTUP\" : \".\\/Jcmp-Server\" , \"P_SERVER_LOCATION\" : \"test\" , \"P_SERVER_UUID\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" } }, \"relationships\" : { \"allocations\" : { \"object\" : \"list\" , \"data\" : [{ \"object\" : \"allocation\" , \"attributes\" : { \"id\" : 55 , \"ip\" : \"123.123.123.123\" , \"alias\" : \"node-1.pterodactyl.panel\" , \"port\" : 50053 , \"assigned\" : true } }] } } } Example \u00b6 <?php try { $pterodactyl -> updateServerStartup ( 14 , [ 'startup' => './Jcmp-Server' , 'environment' => [ 'SERVER_AUTOUPDATE' ], 'egg' => 20 , 'pack' => null , 'image' => 'hcgcloud/pterodactyl-jc2mp:latest' , 'skip_scripts' => false ]); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> server ( 14 ); $server -> updateStartup ([ 'startup' => './Jcmp-Server' , 'environment' => [ 'SERVER_AUTOUPDATE' ], 'egg' => 20 , 'pack' => null , 'image' => 'hcgcloud/pterodactyl-jc2mp:latest' , 'skip_scripts' => false ]); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Update server startup"},{"location":"application/server/update-server-startup/#update-server-startup-with-application-api","text":"Update startup of the given server.","title":"Update Server Startup with Application API"},{"location":"application/server/update-server-startup/#usage","text":"<?php $pterodactyl -> updateServerStartup ( $serverId , array $data ); //For a server instance $server -> updateStartup ( array $data ); ?>","title":"Usage"},{"location":"application/server/update-server-startup/#parameters","text":"Note The serverId is the id of the server, not identifier , externalId or uuid . Parameter Description Rules serverId The id of the server data The data you want to update","title":"Parameters"},{"location":"application/server/update-server-startup/#data","text":"Parameter Description Rules startup Startup command required|string environment Environment variables present|array egg Egg id required|exists:eggs,id pack Pack id sometimes|nullable|numeric|min:0 image Docker image required|string|max:255 skip_scripts Skip egg scripts or not present|boolean","title":"data"},{"location":"application/server/update-server-startup/#returns","text":"Returns a server instance . { \"id\" : 14 , \"externalId\" : null , \"uuid\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" , \"identifier\" : \"76c59598\" , \"node\" : 1 , \"name\" : \"server1\" , \"description\" : \"\" , \"suspended\" : false , \"pack\" : null , \"createdAt\" : \"2019-01-23T04:38:09+00:00\" , \"updatedAt\" : \"2019-08-05T09:36:13+00:00\" , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 256 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [{ \"id\" : 55 , \"nodeId\" : null , \"ip\" : \"123.123.123.123\" , \"ipAlias\" : null , \"port\" : 50053 , \"serverId\" : null , \"createdAt\" : null , \"updatedAt\" : null , \"object\" : \"allocation\" , \"alias\" : \"node-1.pterodactyl.panel\" , \"assigned\" : true }], \"object\" : \"server\" , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 }, \"user\" : 1 , \"allocation\" : 55 , \"nest\" : 8 , \"egg\" : 20 , \"container\" : { \"startup_command\" : \".\\/Jcmp-Server\" , \"image\" : \"hcgcloud\\/pterodactyl-jc2mp:latest\" , \"installed\" : true , \"environment\" : { \"SERVER_AUTOUPDATE\" : \"0\" , \"STARTUP\" : \".\\/Jcmp-Server\" , \"P_SERVER_LOCATION\" : \"test\" , \"P_SERVER_UUID\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" } }, \"relationships\" : { \"allocations\" : { \"object\" : \"list\" , \"data\" : [{ \"object\" : \"allocation\" , \"attributes\" : { \"id\" : 55 , \"ip\" : \"123.123.123.123\" , \"alias\" : \"node-1.pterodactyl.panel\" , \"port\" : 50053 , \"assigned\" : true } }] } } }","title":"Returns"},{"location":"application/server/update-server-startup/#example","text":"<?php try { $pterodactyl -> updateServerStartup ( 14 , [ 'startup' => './Jcmp-Server' , 'environment' => [ 'SERVER_AUTOUPDATE' ], 'egg' => 20 , 'pack' => null , 'image' => 'hcgcloud/pterodactyl-jc2mp:latest' , 'skip_scripts' => false ]); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> server ( 14 ); $server -> updateStartup ([ 'startup' => './Jcmp-Server' , 'environment' => [ 'SERVER_AUTOUPDATE' ], 'egg' => 20 , 'pack' => null , 'image' => 'hcgcloud/pterodactyl-jc2mp:latest' , 'skip_scripts' => false ]); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Example"},{"location":"application/user/create-user/","text":"Create User with Application API \u00b6 Create a new user. Usage \u00b6 <?php $pterodactyl -> createUser ( array $data ); ?> Parameters \u00b6 Parameter Description Rules data The data to create user data \u00b6 Parameter Description Rules external_id External id sometimes|nullable|string|max:255|unique:users,external_id email Email address sometimes|email|unique:users,email username User name required|between:1,255|unique:users,username password Password sometimes|nullable|string language Language required|string root_admin Whether root admin or not boolean first_name First name required|string|between:1,255 last_name Last name required|string|between:1,255 Returns \u00b6 Returns a user instance . { \"id\" : 29 , \"externalId\" : null , \"uuid\" : \"ba8be618-e3e1-4495-aff3-6a2075e98fe3\" , \"username\" : \"testuser\" , \"email\" : \"test@panel.com\" , \"firstName\" : \"Test\" , \"lastName\" : \"User\" , \"language\" : \"en\" , \"rootAdmin\" : false , \"createdAt\" : \"2019-12-11T10:47:19+00:00\" , \"updatedAt\" : \"2019-12-11T10:47:19+00:00\" , \"object\" : \"user\" , \"meta\" : { \"resource\" : \"https:\\/\\/panel.pterodactyl\\/api\\/application\\/users\\/29\" }, \"2fa\" : false } Example \u00b6 <?php $user = $pterodactyl -> createUser ([ 'email' => 'test@panel.com' , 'username' => 'testuser' , 'password' => 'thepassword' , 'language' => 'en' , 'root_admin' => false , 'first_name' => 'Test' , 'last_name' => 'User' ]); print_r ( $user ); ?>","title":"Create user"},{"location":"application/user/create-user/#create-user-with-application-api","text":"Create a new user.","title":"Create User with Application API"},{"location":"application/user/create-user/#usage","text":"<?php $pterodactyl -> createUser ( array $data ); ?>","title":"Usage"},{"location":"application/user/create-user/#parameters","text":"Parameter Description Rules data The data to create user","title":"Parameters"},{"location":"application/user/create-user/#data","text":"Parameter Description Rules external_id External id sometimes|nullable|string|max:255|unique:users,external_id email Email address sometimes|email|unique:users,email username User name required|between:1,255|unique:users,username password Password sometimes|nullable|string language Language required|string root_admin Whether root admin or not boolean first_name First name required|string|between:1,255 last_name Last name required|string|between:1,255","title":"data"},{"location":"application/user/create-user/#returns","text":"Returns a user instance . { \"id\" : 29 , \"externalId\" : null , \"uuid\" : \"ba8be618-e3e1-4495-aff3-6a2075e98fe3\" , \"username\" : \"testuser\" , \"email\" : \"test@panel.com\" , \"firstName\" : \"Test\" , \"lastName\" : \"User\" , \"language\" : \"en\" , \"rootAdmin\" : false , \"createdAt\" : \"2019-12-11T10:47:19+00:00\" , \"updatedAt\" : \"2019-12-11T10:47:19+00:00\" , \"object\" : \"user\" , \"meta\" : { \"resource\" : \"https:\\/\\/panel.pterodactyl\\/api\\/application\\/users\\/29\" }, \"2fa\" : false }","title":"Returns"},{"location":"application/user/create-user/#example","text":"<?php $user = $pterodactyl -> createUser ([ 'email' => 'test@panel.com' , 'username' => 'testuser' , 'password' => 'thepassword' , 'language' => 'en' , 'root_admin' => false , 'first_name' => 'Test' , 'last_name' => 'User' ]); print_r ( $user ); ?>","title":"Example"},{"location":"application/user/delete-user/","text":"Delete User with Application API \u00b6 Delete the given user. Usage \u00b6 <?php $pterodactyl -> deleteUser ( $userId ); //For a user instance $user -> delete (); ?> Parameters \u00b6 Note The userId is the id of the server, not externalId or uuid . Parameter Description Rules userId The id of the user Returns \u00b6 None Throwing exception if failed. Example \u00b6 <?php try { $pterodactyl -> deleteUser ( 14 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $user = $pterodactyl -> user ( 14 ); $user -> delete (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Delete user"},{"location":"application/user/delete-user/#delete-user-with-application-api","text":"Delete the given user.","title":"Delete User with Application API"},{"location":"application/user/delete-user/#usage","text":"<?php $pterodactyl -> deleteUser ( $userId ); //For a user instance $user -> delete (); ?>","title":"Usage"},{"location":"application/user/delete-user/#parameters","text":"Note The userId is the id of the server, not externalId or uuid . Parameter Description Rules userId The id of the user","title":"Parameters"},{"location":"application/user/delete-user/#returns","text":"None Throwing exception if failed.","title":"Returns"},{"location":"application/user/delete-user/#example","text":"<?php try { $pterodactyl -> deleteUser ( 14 ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $user = $pterodactyl -> user ( 14 ); $user -> delete (); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Example"},{"location":"application/user/update-user/","text":"Update User with Application API \u00b6 Update the given user. Usage \u00b6 <?php $pterodactyl -> updateUser ( $userId , array $data ); //For a user instance $user -> update ( array $data ); ?> Parameters \u00b6 Note The userId is the id of the server, not externalId or uuid . Parameter Description Rules userId The id of the user data The data to update user data \u00b6 Parameter Description Rules external_id External id sometimes|nullable|string|max:255|unique:users,external_id email Email address sometimes|email|unique:users,email username User name required|between:1,255|unique:users,username password Password sometimes|nullable|string language Language sometimes|string root_admin Whether root admin or not sometimes|boolean first_name First name required|string|between:1,255 last_name Last name required|string|between:1,255 Returns \u00b6 Returns a user instance . { \"id\" : 1 , \"externalId\" : \"1\" , \"uuid\" : \"c747ebbb-1989-413b-8eba-a49b74277c9f\" , \"username\" : \"user1\" , \"email\" : \"user1@email.com\" , \"firstName\" : \"user\" , \"lastName\" : \"123\" , \"language\" : \"zh\" , \"rootAdmin\" : true , \"createdAt\" : \"2019-01-05T12:57:04+00:00\" , \"updatedAt\" : \"2019-07-12T05:01:15+00:00\" , \"object\" : \"user\" , \"2fa\" : true } Example \u00b6 <?php $user = $pterodactyl -> updateUser ([ 'email' => 'test@panel.com' , 'username' => 'testuser' , 'password' => 'thepassword' , 'language' => 'en' , 'root_admin' => false , 'first_name' => 'Test' , 'last_name' => 'User' ]); print_r ( $user ); ?> <?php try { $user = $pterodactyl -> user ( 29 ); $user -> update ([ 'email' => 'test@panel.com' , 'username' => 'testuser' , 'password' => 'thepassword' , 'language' => 'en' , 'root_admin' => false , 'first_name' => 'Test' , 'last_name' => 'User' ]); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Update user"},{"location":"application/user/update-user/#update-user-with-application-api","text":"Update the given user.","title":"Update User with Application API"},{"location":"application/user/update-user/#usage","text":"<?php $pterodactyl -> updateUser ( $userId , array $data ); //For a user instance $user -> update ( array $data ); ?>","title":"Usage"},{"location":"application/user/update-user/#parameters","text":"Note The userId is the id of the server, not externalId or uuid . Parameter Description Rules userId The id of the user data The data to update user","title":"Parameters"},{"location":"application/user/update-user/#data","text":"Parameter Description Rules external_id External id sometimes|nullable|string|max:255|unique:users,external_id email Email address sometimes|email|unique:users,email username User name required|between:1,255|unique:users,username password Password sometimes|nullable|string language Language sometimes|string root_admin Whether root admin or not sometimes|boolean first_name First name required|string|between:1,255 last_name Last name required|string|between:1,255","title":"data"},{"location":"application/user/update-user/#returns","text":"Returns a user instance . { \"id\" : 1 , \"externalId\" : \"1\" , \"uuid\" : \"c747ebbb-1989-413b-8eba-a49b74277c9f\" , \"username\" : \"user1\" , \"email\" : \"user1@email.com\" , \"firstName\" : \"user\" , \"lastName\" : \"123\" , \"language\" : \"zh\" , \"rootAdmin\" : true , \"createdAt\" : \"2019-01-05T12:57:04+00:00\" , \"updatedAt\" : \"2019-07-12T05:01:15+00:00\" , \"object\" : \"user\" , \"2fa\" : true }","title":"Returns"},{"location":"application/user/update-user/#example","text":"<?php $user = $pterodactyl -> updateUser ([ 'email' => 'test@panel.com' , 'username' => 'testuser' , 'password' => 'thepassword' , 'language' => 'en' , 'root_admin' => false , 'first_name' => 'Test' , 'last_name' => 'User' ]); print_r ( $user ); ?> <?php try { $user = $pterodactyl -> user ( 29 ); $user -> update ([ 'email' => 'test@panel.com' , 'username' => 'testuser' , 'password' => 'thepassword' , 'language' => 'en' , 'root_admin' => false , 'first_name' => 'Test' , 'last_name' => 'User' ]); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Example"},{"location":"application/user/user-ex/","text":"Get User by External Id with Application API \u00b6 Get a user instance by external id. Usage \u00b6 <?php $pterodactyl -> userEx ( $externalId , $includes = []); ?> Parameters \u00b6 Note The externalId is the externalId of the user, not id or uuid . Parameter Description Rules externalId The externalId of the user includes The related data you want to query Returns \u00b6 Returns a user instance . { \"id\" : 1 , \"externalId\" : \"1\" , \"uuid\" : \"c747ebbb-1989-413b-8eba-a49b74277c9f\" , \"username\" : \"user1\" , \"email\" : \"user1@email.com\" , \"firstName\" : \"user\" , \"lastName\" : \"123\" , \"language\" : \"zh\" , \"rootAdmin\" : true , \"createdAt\" : \"2019-01-05T12:57:04+00:00\" , \"updatedAt\" : \"2019-07-12T05:01:15+00:00\" , \"object\" : \"user\" , \"2fa\" : true } Example \u00b6 <?php $user = $pterodactyl -> userEx ( 1 ); print_r ( $user ); ?>","title":"Get user by external id"},{"location":"application/user/user-ex/#get-user-by-external-id-with-application-api","text":"Get a user instance by external id.","title":"Get User by External Id with Application API"},{"location":"application/user/user-ex/#usage","text":"<?php $pterodactyl -> userEx ( $externalId , $includes = []); ?>","title":"Usage"},{"location":"application/user/user-ex/#parameters","text":"Note The externalId is the externalId of the user, not id or uuid . Parameter Description Rules externalId The externalId of the user includes The related data you want to query","title":"Parameters"},{"location":"application/user/user-ex/#returns","text":"Returns a user instance . { \"id\" : 1 , \"externalId\" : \"1\" , \"uuid\" : \"c747ebbb-1989-413b-8eba-a49b74277c9f\" , \"username\" : \"user1\" , \"email\" : \"user1@email.com\" , \"firstName\" : \"user\" , \"lastName\" : \"123\" , \"language\" : \"zh\" , \"rootAdmin\" : true , \"createdAt\" : \"2019-01-05T12:57:04+00:00\" , \"updatedAt\" : \"2019-07-12T05:01:15+00:00\" , \"object\" : \"user\" , \"2fa\" : true }","title":"Returns"},{"location":"application/user/user-ex/#example","text":"<?php $user = $pterodactyl -> userEx ( 1 ); print_r ( $user ); ?>","title":"Example"},{"location":"application/user/user/","text":"Get User with Application API \u00b6 Get a user instance. Usage \u00b6 <?php $pterodactyl -> user ( $userId , $includes = []); ?> Parameters \u00b6 Note The userId is the id of the server, not externalId or uuid . Parameter Description Rules userId The id of the user includes The related data you want to query Returns \u00b6 Returns a user instance . { \"id\" : 1 , \"externalId\" : \"1\" , \"uuid\" : \"c747ebbb-1989-413b-8eba-a49b74277c9f\" , \"username\" : \"user1\" , \"email\" : \"user1@email.com\" , \"firstName\" : \"user\" , \"lastName\" : \"123\" , \"language\" : \"zh\" , \"rootAdmin\" : true , \"createdAt\" : \"2019-01-05T12:57:04+00:00\" , \"updatedAt\" : \"2019-07-12T05:01:15+00:00\" , \"object\" : \"user\" , \"2fa\" : true } Example \u00b6 <?php $user = $pterodactyl -> user ( 1 ); print_r ( $user ); ?>","title":"Get user"},{"location":"application/user/user/#get-user-with-application-api","text":"Get a user instance.","title":"Get User with Application API"},{"location":"application/user/user/#usage","text":"<?php $pterodactyl -> user ( $userId , $includes = []); ?>","title":"Usage"},{"location":"application/user/user/#parameters","text":"Note The userId is the id of the server, not externalId or uuid . Parameter Description Rules userId The id of the user includes The related data you want to query","title":"Parameters"},{"location":"application/user/user/#returns","text":"Returns a user instance . { \"id\" : 1 , \"externalId\" : \"1\" , \"uuid\" : \"c747ebbb-1989-413b-8eba-a49b74277c9f\" , \"username\" : \"user1\" , \"email\" : \"user1@email.com\" , \"firstName\" : \"user\" , \"lastName\" : \"123\" , \"language\" : \"zh\" , \"rootAdmin\" : true , \"createdAt\" : \"2019-01-05T12:57:04+00:00\" , \"updatedAt\" : \"2019-07-12T05:01:15+00:00\" , \"object\" : \"user\" , \"2fa\" : true }","title":"Returns"},{"location":"application/user/user/#example","text":"<?php $user = $pterodactyl -> user ( 1 ); print_r ( $user ); ?>","title":"Example"},{"location":"application/user/users/","text":"List Users with Application API \u00b6 Get the collection of users. Usage \u00b6 <?php $pterodactyl -> users ( int $page = 1 ); ?> Parameters \u00b6 Parameter Description Rules page The page number Returns \u00b6 { \"data\" : [{ \"id\" : 1 , \"externalId\" : \"1\" , \"uuid\" : \"c747ebbb-1989-413b-8eba-a49b74277c9f\" , \"username\" : \"user1\" , \"email\" : \"user1@email.com\" , \"firstName\" : \"user\" , \"lastName\" : \"123\" , \"language\" : \"zh\" , \"rootAdmin\" : true , \"createdAt\" : \"2019-01-05T12:57:04+00:00\" , \"updatedAt\" : \"2019-07-12T05:01:15+00:00\" , \"object\" : \"user\" , \"2fa\" : true }, { \"id\" : 2 , \"externalId\" : null , \"uuid\" : \"8ed41e98-e26c-4f3e-a022-0938865dd5b3\" , \"username\" : \"user2\" , \"email\" : \"user2@email.com\" , \"firstName\" : \"user\" , \"lastName\" : \"456\" , \"language\" : \"zh\" , \"rootAdmin\" : false , \"createdAt\" : \"2019-01-08T07:55:43+00:00\" , \"updatedAt\" : \"2019-01-08T07:56:11+00:00\" , \"object\" : \"user\" , \"2fa\" : false }], \"meta\" : { \"pagination\" : { \"total\" : 2 , \"count\" : 2 , \"per_page\" : 50 , \"current_page\" : 1 , \"total_pages\" : 1 , \"links\" : [] } } } Example \u00b6 <?php $users = $pterodactyl -> users (); print_r ( $users ); ?>","title":"List users"},{"location":"application/user/users/#list-users-with-application-api","text":"Get the collection of users.","title":"List Users with Application API"},{"location":"application/user/users/#usage","text":"<?php $pterodactyl -> users ( int $page = 1 ); ?>","title":"Usage"},{"location":"application/user/users/#parameters","text":"Parameter Description Rules page The page number","title":"Parameters"},{"location":"application/user/users/#returns","text":"{ \"data\" : [{ \"id\" : 1 , \"externalId\" : \"1\" , \"uuid\" : \"c747ebbb-1989-413b-8eba-a49b74277c9f\" , \"username\" : \"user1\" , \"email\" : \"user1@email.com\" , \"firstName\" : \"user\" , \"lastName\" : \"123\" , \"language\" : \"zh\" , \"rootAdmin\" : true , \"createdAt\" : \"2019-01-05T12:57:04+00:00\" , \"updatedAt\" : \"2019-07-12T05:01:15+00:00\" , \"object\" : \"user\" , \"2fa\" : true }, { \"id\" : 2 , \"externalId\" : null , \"uuid\" : \"8ed41e98-e26c-4f3e-a022-0938865dd5b3\" , \"username\" : \"user2\" , \"email\" : \"user2@email.com\" , \"firstName\" : \"user\" , \"lastName\" : \"456\" , \"language\" : \"zh\" , \"rootAdmin\" : false , \"createdAt\" : \"2019-01-08T07:55:43+00:00\" , \"updatedAt\" : \"2019-01-08T07:56:11+00:00\" , \"object\" : \"user\" , \"2fa\" : false }], \"meta\" : { \"pagination\" : { \"total\" : 2 , \"count\" : 2 , \"per_page\" : 50 , \"current_page\" : 1 , \"total_pages\" : 1 , \"links\" : [] } } }","title":"Returns"},{"location":"application/user/users/#example","text":"<?php $users = $pterodactyl -> users (); print_r ( $users ); ?>","title":"Example"},{"location":"client/command-server/","text":"Command Server with Account API \u00b6 Send a command to a given server. Usage \u00b6 <?php $pterodactyl -> commandServer ( $serverIdentifier , $command ); //For a server instance $server -> command ( $command ); ?> Parameters \u00b6 Note The serverIdentifier is the identifier of the server, not id , externalId or uuid . Parameter Description Rules serverIdentifier The identifier of the server command The command you want to send Returns \u00b6 None Throwing exception if failed. Example \u00b6 <?php try { $pterodactyl -> commandServer ( '76c59598' , 'shutdown' ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> getServer ( '76c59598' ); $server -> command ( 'shutdown' ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Command server"},{"location":"client/command-server/#command-server-with-account-api","text":"Send a command to a given server.","title":"Command Server with Account API"},{"location":"client/command-server/#usage","text":"<?php $pterodactyl -> commandServer ( $serverIdentifier , $command ); //For a server instance $server -> command ( $command ); ?>","title":"Usage"},{"location":"client/command-server/#parameters","text":"Note The serverIdentifier is the identifier of the server, not id , externalId or uuid . Parameter Description Rules serverIdentifier The identifier of the server command The command you want to send","title":"Parameters"},{"location":"client/command-server/#returns","text":"None Throwing exception if failed.","title":"Returns"},{"location":"client/command-server/#example","text":"<?php try { $pterodactyl -> commandServer ( '76c59598' , 'shutdown' ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> getServer ( '76c59598' ); $server -> command ( 'shutdown' ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Example"},{"location":"client/get-server/","text":"Get Server with Account API \u00b6 Get the details of a given server. Usage \u00b6 <?php $pterodactyl -> getServer ( $serverIdentifier ); ?> Parameters \u00b6 Note The serverIdentifier is the identifier of the server, not id , externalId or uuid . Parameter Description Rules serverIdentifier The identifier of the server Returns \u00b6 Returns a server instance . Note id , externalId , node , suspended , pack , createdAt , updatedAt will be always null , as they're not available with Account API. { \"id\" : null , \"externalId\" : null , \"uuid\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" , \"identifier\" : \"76c59598\" , \"node\" : null , \"name\" : \"server1\" , \"description\" : \"\" , \"suspended\" : null , \"pack\" : null , \"createdAt\" : null , \"updatedAt\" : null , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 256 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [], \"object\" : \"server\" , \"serverOwner\" : true , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 } } Example \u00b6 <?php $server = $pterodactyl -> getServer ( '76c59598' ); print_r ( $server ); ?>","title":"Get server"},{"location":"client/get-server/#get-server-with-account-api","text":"Get the details of a given server.","title":"Get Server with Account API"},{"location":"client/get-server/#usage","text":"<?php $pterodactyl -> getServer ( $serverIdentifier ); ?>","title":"Usage"},{"location":"client/get-server/#parameters","text":"Note The serverIdentifier is the identifier of the server, not id , externalId or uuid . Parameter Description Rules serverIdentifier The identifier of the server","title":"Parameters"},{"location":"client/get-server/#returns","text":"Returns a server instance . Note id , externalId , node , suspended , pack , createdAt , updatedAt will be always null , as they're not available with Account API. { \"id\" : null , \"externalId\" : null , \"uuid\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" , \"identifier\" : \"76c59598\" , \"node\" : null , \"name\" : \"server1\" , \"description\" : \"\" , \"suspended\" : null , \"pack\" : null , \"createdAt\" : null , \"updatedAt\" : null , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 256 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [], \"object\" : \"server\" , \"serverOwner\" : true , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 } }","title":"Returns"},{"location":"client/get-server/#example","text":"<?php $server = $pterodactyl -> getServer ( '76c59598' ); print_r ( $server ); ?>","title":"Example"},{"location":"client/list-servers/","text":"List Servers with Account API \u00b6 Get the collection of servers for the authenticated user. Usage \u00b6 <?php $pterodactyl -> listServers ( int $page = 1 ); ?> Parameters \u00b6 Parameter Description Rules page The page number Returns \u00b6 Note id , externalId , node , suspended , pack , createdAt , updatedAt will be always null , as they're not available with Account API. { \"data\" : [{ \"id\" : null , \"externalId\" : null , \"uuid\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" , \"identifier\" : \"76c59598\" , \"node\" : null , \"name\" : \"server1\" , \"description\" : \"\" , \"suspended\" : null , \"pack\" : null , \"createdAt\" : null , \"updatedAt\" : null , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 256 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [], \"object\" : \"server\" , \"serverOwner\" : true , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 } }, { \"id\" : null , \"externalId\" : null , \"uuid\" : \"6928f121-45bf-4f95-869a-eaebf02cd2a6\" , \"identifier\" : \"6928f121\" , \"node\" : null , \"name\" : \"server2\" , \"description\" : \"\" , \"suspended\" : null , \"pack\" : null , \"createdAt\" : null , \"updatedAt\" : null , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 512 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [], \"object\" : \"server\" , \"serverOwner\" : true , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 } }], \"meta\" : { \"pagination\" : { \"total\" : 2 , \"count\" : 2 , \"per_page\" : 15 , \"current_page\" : 1 , \"total_pages\" : 1 , \"links\" : [] } } } Example \u00b6 <?php $server = $pterodactyl -> listServers (); print_r ( $server ); ?>","title":"List servers"},{"location":"client/list-servers/#list-servers-with-account-api","text":"Get the collection of servers for the authenticated user.","title":"List Servers with Account API"},{"location":"client/list-servers/#usage","text":"<?php $pterodactyl -> listServers ( int $page = 1 ); ?>","title":"Usage"},{"location":"client/list-servers/#parameters","text":"Parameter Description Rules page The page number","title":"Parameters"},{"location":"client/list-servers/#returns","text":"Note id , externalId , node , suspended , pack , createdAt , updatedAt will be always null , as they're not available with Account API. { \"data\" : [{ \"id\" : null , \"externalId\" : null , \"uuid\" : \"76c59598-22df-4490-92bc-f6fb4a80e0c7\" , \"identifier\" : \"76c59598\" , \"node\" : null , \"name\" : \"server1\" , \"description\" : \"\" , \"suspended\" : null , \"pack\" : null , \"createdAt\" : null , \"updatedAt\" : null , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 256 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [], \"object\" : \"server\" , \"serverOwner\" : true , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 } }, { \"id\" : null , \"externalId\" : null , \"uuid\" : \"6928f121-45bf-4f95-869a-eaebf02cd2a6\" , \"identifier\" : \"6928f121\" , \"node\" : null , \"name\" : \"server2\" , \"description\" : \"\" , \"suspended\" : null , \"pack\" : null , \"createdAt\" : null , \"updatedAt\" : null , \"limits\" : { \"memory\" : 128 , \"swap\" : 0 , \"disk\" : 512 , \"io\" : 500 , \"cpu\" : 0 }, \"allocations\" : [], \"object\" : \"server\" , \"serverOwner\" : true , \"featureLimits\" : { \"databases\" : 0 , \"allocations\" : 0 } }], \"meta\" : { \"pagination\" : { \"total\" : 2 , \"count\" : 2 , \"per_page\" : 15 , \"current_page\" : 1 , \"total_pages\" : 1 , \"links\" : [] } } }","title":"Returns"},{"location":"client/list-servers/#example","text":"<?php $server = $pterodactyl -> listServers (); print_r ( $server ); ?>","title":"Example"},{"location":"client/power-server/","text":"Power Server with Account API \u00b6 Toggle the power on a given server. Usage \u00b6 <?php $pterodactyl -> powerServer ( $serverIdentifier , $action ); //For a server instance $server -> power ( $action ); ?> Parameters \u00b6 Note The serverIdentifier is the identifier of the server, not id , externalId or uuid . Parameter Description Rules serverIdentifier The identifier of the server action The action you want to send in:start,stop,restart,kill Returns \u00b6 None Throwing exception if failed. Example \u00b6 <?php try { $pterodactyl -> powerServer ( '76c59598' , 'restart' ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> getServer ( '76c59598' ); $server -> power ( 'restart' ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Power server"},{"location":"client/power-server/#power-server-with-account-api","text":"Toggle the power on a given server.","title":"Power Server with Account API"},{"location":"client/power-server/#usage","text":"<?php $pterodactyl -> powerServer ( $serverIdentifier , $action ); //For a server instance $server -> power ( $action ); ?>","title":"Usage"},{"location":"client/power-server/#parameters","text":"Note The serverIdentifier is the identifier of the server, not id , externalId or uuid . Parameter Description Rules serverIdentifier The identifier of the server action The action you want to send in:start,stop,restart,kill","title":"Parameters"},{"location":"client/power-server/#returns","text":"None Throwing exception if failed.","title":"Returns"},{"location":"client/power-server/#example","text":"<?php try { $pterodactyl -> powerServer ( '76c59598' , 'restart' ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?> <?php try { $server = $pterodactyl -> getServer ( '76c59598' ); $server -> power ( 'restart' ); } catch ( \\Exception $e ){ print_r ( $e -> getMessage ()); } ?>","title":"Example"},{"location":"client/utilization-server/","text":"Utilization Server with Account API \u00b6 Get the utilization of a given server. Usage \u00b6 <?php $pterodactyl -> utilizationServer ( $serverIdentifier ); ?> Parameters \u00b6 Note The serverIdentifier is the identifier of the server, not id , externalId or uuid . Parameter Description Rules serverIdentifier The identifier of the server Returns \u00b6 { \"cpu\" : { \"current\" : 199.337 , \"cores\" : [ 16.999 , 105.385 , 1.226 , 1.764 , 4.335 , 0.559 , 14.094 , 0 , 53.014 , 1.962 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], \"limit\" : 0 }, \"disk\" : { \"current\" : 205 , \"limit\" : 256 }, \"memory\" : { \"current\" : 97 , \"limit\" : 128 }, \"state\" : \"on\" , \"object\" : \"stats\" } Example \u00b6 <?php $server = $pterodactyl -> utilizationServer ( '76c59598' ); print_r ( $server ); ?>","title":"Utilization server"},{"location":"client/utilization-server/#utilization-server-with-account-api","text":"Get the utilization of a given server.","title":"Utilization Server with Account API"},{"location":"client/utilization-server/#usage","text":"<?php $pterodactyl -> utilizationServer ( $serverIdentifier ); ?>","title":"Usage"},{"location":"client/utilization-server/#parameters","text":"Note The serverIdentifier is the identifier of the server, not id , externalId or uuid . Parameter Description Rules serverIdentifier The identifier of the server","title":"Parameters"},{"location":"client/utilization-server/#returns","text":"{ \"cpu\" : { \"current\" : 199.337 , \"cores\" : [ 16.999 , 105.385 , 1.226 , 1.764 , 4.335 , 0.559 , 14.094 , 0 , 53.014 , 1.962 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], \"limit\" : 0 }, \"disk\" : { \"current\" : 205 , \"limit\" : 256 }, \"memory\" : { \"current\" : 97 , \"limit\" : 128 }, \"state\" : \"on\" , \"object\" : \"stats\" }","title":"Returns"},{"location":"client/utilization-server/#example","text":"<?php $server = $pterodactyl -> utilizationServer ( '76c59598' ); print_r ( $server ); ?>","title":"Example"}]}